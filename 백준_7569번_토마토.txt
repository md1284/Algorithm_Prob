#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <string.h>

using namespace std;

int m, n, h;
int box[101][101][101];	// box[z][y][x];
int mov[6][3] = {{0, 0, 1}, {0, 1, 0}, {0, -1, 0}, {0, 0, -1}, {1, 0, 0}, {-1, 0, 0}};

int bfs() {
	int day = 0;
	queue<pair<pair<int, int>, int> > q;
	
	for(int z = 0; z<h; z++) {
		for(int y = 0; y<n; y++) {
			for(int x = 0; x<m; x++)
				if(box[z][y][x] == 1) {
					q.push(make_pair(make_pair(x, y), z));
				}
		}
	}
	
	while(true) {
		queue<pair<pair<int, int>, int> > p;
		
		while(!q.empty()) {
			int x = q.front().first.first;
			int y = q.front().first.second;
			int z = q.front().second;
			q.pop();
			
			for(int i = 0; i<6; i++) {
				int dz = z + mov[i][0];
				int dy = y + mov[i][1];
				int dx = x + mov[i][2];
				
				if(dx < 0 || m <= dx || dy < 0 || n <= dy || dz < 0 || h <= dz)	continue;
				if(box[dz][dy][dx] != 0)	continue;
				
				p.push(make_pair(make_pair(dx, dy), dz));
				box[dz][dy][dx] = 1;
			}
		}
		q = p;
		if(q.empty())	break;
		
		day++;
	}
	
	return day;
}

bool isFulled() {
	for(int z = 0; z<h; z++) {
		for(int y = 0; y<n; y++) {
			for(int x = 0; x<m; x++)
				if(box[z][y][x] == 0)	return false;
		}
	}
	return true;
}

int main() {
	cin >> m >> n >> h;
	
	for(int z = 0; z<h; z++) {
		for(int y = 0; y<n; y++) {
			for(int x = 0; x<m; x++)
				cin >> box[z][y][x];
		}
	}
	int day = bfs();
	if(isFulled())	cout << day << endl;
	else	cout << -1 << endl;
	
	
	return 0;
}