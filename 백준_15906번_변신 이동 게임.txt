#include <iostream>
#include <vector>
#include <queue>

using namespace std;

typedef pair<int,int> pii;

struct pi{
    int d, y, x;
    bool m;
};

struct cmp {
    bool operator()(const pi& a, const pi& b) {
        return a.d > b.d;
    }
};

const int S = 500, INF = 1e9;
int N, T, R, C;
int dist[S+5][S+5][2];
char adj[S+5][S+5];
pii w[S+5][S+5][4];
int mv[4][2] = {
    {0,1}, {1,0}, {0,-1}, {-1,0}
};

int solve() {
    for(int i = 1; i<=N; i++) {
        for(int j = 1; j<=N; j++) {
            for(int k = i+1; k<=N; k++) {
                if(adj[k][j] == '#') {
                    w[i][j][0] = {k, j};
                    break;
                }
            }
            for(int k = i-1; k>=1; k--) {
                if(adj[k][j] == '#') {
                    w[i][j][1] = {k, j};
                    break;
                }
            }
            for(int k = j-1; k>=1; k--) {
                if(adj[i][k] == '#') {
                    w[i][j][2] = {i, k};
                    break;
                }
            }
            for(int k = j+1; k<=N; k++) {
                if(adj[i][k] == '#') {
                    w[i][j][3] = {i, k};
                    break;
                }
            }
        }
    }

    for(int i = 1; i<=N; i++) {
        for(int j = 1; j<=N; j++) {
            dist[i][j][0] = INF;
            dist[i][j][1] = INF;
        }
    }
    priority_queue<pi, vector<pi>, cmp> pq;
    pq.push({0, 1, 1, false});
    dist[1][1][0] = 0;

    while(!pq.empty()) {
        int d = pq.top().d;
        int y = pq.top().y;
        int x = pq.top().x;
        bool m = pq.top().m;
        pq.pop();

        for(int type = 0; type<4; type++) {
            int ny = y + mv[type][0];
            int nx = x + mv[type][1];

            if(ny < 1 || ny > N || nx < 1 || nx > N)
                continue;
            if(dist[ny][nx][0] <= d + 1)
                continue;
            dist[ny][nx][0] = d + 1;
            pq.push({dist[ny][nx][0], ny, nx, false});
        }

        for(int type = 0; type<4; type++) {
            int ny = w[y][x][type].first;
            int nx = w[y][x][type].second;
            int t = (m == true) ? 0 : T;

            if(ny < 1 || ny > N || nx < 1 || nx > N)
                continue;
            if(dist[ny][nx][1] <= d + t + 1)
                continue;
            dist[ny][nx][1] = d + t + 1;
            pq.push({dist[ny][nx][1], ny, nx, true});
        }
    }
    return min(dist[R][C][0], dist[R][C][1]);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cin >> N >> T >> R >> C;

    for(int i = 1; i<=N; i++) {
        for(int j = 1; j<=N; j++)
            cin >> adj[i][j];
    }
    cout << solve() << '\n';

    return 0;
}