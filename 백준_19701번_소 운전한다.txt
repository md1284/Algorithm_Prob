#include <iostream>
#include <vector>
#include <queue>

using namespace std;

typedef long long ll;

typedef pair<ll,ll> pll;

const int S = 1e5;
const ll INF = 2e9+7;
int V, E;
ll dist[2*S+5];
vector<pll> adj[2*S+5];

void solve() {
    for(int i = 3; i<=2*V+1; i++)
        dist[i] = 2*INF;

    priority_queue<pll, vector<pll>, greater<pll>> pq;
    pq.push({0, 2});

    while(!pq.empty()) {
        ll here = pq.top().second;
        ll d = pq.top().first;
        pq.pop();

        for(int i = 0; i<adj[here].size(); i++) {
            ll there = adj[here][i].first;
            ll c = adj[here][i].second;

            if(dist[there] <= d + c)
                continue;
            
            dist[there] = d + c;
            pq.push({dist[there], there});
        }
    }
    for(int i = 2; i<=V; i++)
        cout << dist[i*2+1]-INF << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cin >> V >> E;

    for(int i = 0; i<E; i++) {
        ll x, y, t, k;
        cin >> x >> y >> t >> k;
        
        adj[2*x].push_back({2*y, t});
        adj[2*y].push_back({2*x, t});

        adj[2*x+1].push_back({2*y+1, t});
        adj[2*y+1].push_back({2*x+1, t});

        adj[2*x].push_back({2*y+1, INF-k+t});
        adj[2*y].push_back({2*x+1, INF-k+t});
    }
    solve();

    return 0;
}