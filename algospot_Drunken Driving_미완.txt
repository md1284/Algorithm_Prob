#include <stdio.h>
#include <vector>
#include <windows.h>

using namespace std;

typedef struct _edge
{
	int v, c;
} edge;

vector<int> st;
vector<edge> G[600];
int GP[600], visit[600];
int v, e, n, inf = 200000000;
int check, k, sum, mincost = inf;
int f;

void search(int s, int e) {
	if (st.size() == 1)
		k++;

	if (k == check)
		return;

	if (s == e) {
		int maxdelay = -1;
		for (int i = 1; i < st.size()-1; i++) {
			if (maxdelay < st[i])
				maxdelay = st[i];
		}

		if (mincost > sum + maxdelay)
			mincost = sum + maxdelay;

		return;
	}

	visit[s] = 1;
	if (f == 0) {
		st.push_back(GP[s]);
		f = 1;
	}

	for (int i = 0; i < G[s].size(); i++) {
		if (visit[G[s][i].v] == 0) {
			st.push_back(GP[G[s][i].v]);
			sum += G[s][i].c;
			search(G[s][i].v, e);
			sum -= G[s][i].c;
			st.pop_back();

			visit[G[s][i].v] = 0;
		}
	}
}

int main(void) {
	scanf("%d %d", &v, &e);
	
	for (int i = 1;i <= v; i++) {
		scanf("%d", &GP[i]);
	}

	for (int i = 0; i < e; i++) {
		int a, b, c;
		scanf("%d %d %d", &a, &b, &c);

		edge eg1, eg2;
		eg1.v = b; 
		eg2.v = a;
		eg1.c = c; 
		eg2.c = c;

		G[a].push_back(eg1);
		G[b].push_back(eg2);
	}

	scanf("%d", &n);

	for (int i = 0; i < n; i++) {
		int a, b;
		scanf("%d %d", &a, &b);

		check = G[1].size();

		search(a, b);
		printf("%d\n", mincost);

		f = 0;
		sum = 0;
		check = 0;
		k = 0;
		mincost = inf;
		st.clear();
		for (int i = 1; i <= v; i++)
			visit[i] = 0;
	}

	system("pause");
	return 0;
}