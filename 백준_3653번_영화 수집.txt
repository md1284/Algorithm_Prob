#include <iostream>
#include <cstring>
#include <fstream>

using namespace std;

const int S = 1e5;
int T, N, M;
int Tree[8*S+5], idx[S+5];

void update(int bucket, int node, int start, int end, int x) {
	if(node < start || end < node)	return;
	
	Tree[bucket] += x;
	
	if(start != end) {
		update(bucket*2, node, start, (start+end)/2, x);
		update(bucket*2+1, node, (start+end)/2+1, end, x);
	}
}

int get(int bucket, int start, int end, int left, int right) {
	if(right < start || end < left)	return 0;
	
	if(left <= start && end <= right)	return  Tree[bucket];
	
	return get(bucket*2, start, (start+end)/2, left, right)
			+get(bucket*2+1, (start+end)/2+1, end, left, right);
}

int main() {
	//fstream inf("prob.txt");
	//inf >> T;
	scanf("%d", &T);
	
	for(int i = 1; i<=T; i++) {
		//inf >> N >> M;
		scanf("%d %d", &N, &M);
		
		memset(Tree, 0, sizeof(Tree));
		memset(idx, 0, sizeof(idx));
		for(int j = M+1; j<=N+M; j++) {
			update(1, j, 1, N+M, 1);
			idx[j-M] = j;
		}
		
		int t = M;
		for(int j = 1; j<=M; j++) {
			int q;
			//inf >> q;
			scanf("%d", &q);
			
			printf("%d ", get(1, 1, N+M, 1, idx[q]-1));
			update(1, idx[q], 1, N+M, -1);
			update(1, t, 1, N+M, 1);
			idx[q] = t;
			--t;
		}
		printf("\n");
	}
	
	return 0;
}