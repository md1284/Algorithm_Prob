#include <iostream>
#include <vector>

using namespace std;

vector<int> getPartialMatch(const string& N) {
	int m = N.size();
	vector<int> pi(m, 0);
	int begin = 1, matched = 0;
	
	while(begin + matched < m) {
		if(N[begin + matched] == N[matched]) {
			matched++;
			pi[begin + matched - 1] = matched;
		}
		else {
			if(matched == 0)
				begin++;
			else {
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	return pi;
}

vector<int> KMPSearch(const string& H, const string& N) {
	int n = H.size(), m = N.size();
	vector<int> pi = getPartialMatch(N);
	vector<int> ret;
	int begin = 0, matched = 0;
	
	while(begin <= n - m) {
		if(matched < m && H[begin + matched] == N[matched]) {
			matched++;
			if(matched == m)
				ret.push_back(begin);
		}
		else {
			if(matched == 0)
				begin++;
			else {
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	return ret;
}

int main() {
	string H, N;
	getline(cin, H);
	getline(cin, N);
	vector<int> ret = KMPSearch(H, N);
	
	if(ret.empty())
		cout << 0 << endl;
	else {
		int cnt = 0, n = H.size(), m = N.size();
		vector<int> sol;
		sol.push_back(ret[0]);
		
		int j = 0;
		for(int i = 1; i < ret.size(); i++) {
			if(sol[j] + m <= ret[i]) {
				sol.push_back(ret[i]);
				j++;
			}
		}
		cout << sol.size() << endl;
	}
	
	return 0;
}