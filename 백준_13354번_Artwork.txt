#include <iostream>
#include <vector>
#include <fstream>

using namespace std;

typedef struct seg {
    int x1, y1;
    int x2, y2;
};

const int S = 1000, MX = 1e6;
int N, M, Q;
int pt[MX + 5], d[MX + 5], bd[S + 5][S + 5];
vector<seg> p;
bool visited[S + 5][S + 5];
int mv[4][2] = {
    {0, 1},
    {1, 0},
    {0, -1},
    {-1, 0}
};

int find(int a) {
    if (a == pt[a])
        return a;
    return pt[a] = find(pt[a]);
}

void join(int a, int b) {
    a = find(a);
    b = find(b);

    if (a == b)
        return;

    if (d[a] < d[b])
        pt[a] = b;
    else if (d[a] > d[b])
        pt[b] = a;
    else {
        pt[b] = a;
        d[a]++;
    }
}

int xyToidx(int x, int y) {
    return x + (y - 1) * N;
}

int merge(int x1, int y1, int x2, int y2) {
    if (find(xyToidx(x1, y1)) != find(xyToidx(x2, y2))) {
        join(xyToidx(x1, y1), xyToidx(x2, y2));
        return 1;
    }
    return 0;
}

void paint(const seg& s, int d) {
    int x1 = s.x1, x2 = s.x2, y1 = s.y1, y2 = s.y2;
    if (x1 == x2) {
        if (y1 > y2)
            swap(y1, y2);
        for (int i = y1; i <= y2; i++)
            bd[x1][i] += d;
    }
    else {
        if (x1 > x2)
            swap(x1, x2);
        for (int i = x1; i <= x2; i++)
            bd[i][y1] += d;
    }
}

void dfs(int x, int y, int st) {
    visited[x][y] = true;
    join(xyToidx(x, y), st);

    for (int type = 0; type < 4; type++) {
        int nx = x + mv[type][0];
        int ny = y + mv[type][1];

        if (nx < 1 || nx > N || ny < 1 || ny > M)
            continue;
        if (visited[nx][ny] == true || bd[nx][ny] != 0)
            continue;
        
        dfs(nx, ny, st);
    }
}

int dfsAll() {
    int cnt = 0;
    for (int i = 1; i <= M; i++) {
        for (int j = 1; j <= N; j++) {
            if (visited[j][i] == true || bd[j][i] != 0)
                continue;
            cnt++;
            dfs(j, i, xyToidx(j, i));
        }
    }
    return cnt;
}

void solve() {
    vector<int> ret;
    int cnt = dfsAll();
    ret.push_back(cnt);

    for (int i = p.size() - 1; i >= 0; i--) {
        int x1 = p[i].x1, x2 = p[i].x2, y1 = p[i].y1, y2 = p[i].y2;
        paint(p[i], -1);

        if (x1 == x2) {
            if (y1 > y2)
                swap(y1, y2);

            int ysum = 0;
            for (int j = y1; j < y2; j++) {
                if (bd[x1][j] != 0 || bd[x1][j + 1] != 0)
                    continue;
                merge(x1, j, x1, j + 1);
            }
            for (int j = y1; j <= y2; j++) {
                if (bd[x1][j] != 0)
                    continue;
                if (pt[xyToidx(x1, j)] == xyToidx(x1, j))
                    ysum++;
            }

            if (y1 - 1 >= 1 && bd[x1][y1] == 0 && bd[x1][y1 - 1] == 0)
                ysum -= merge(x1, y1 - 1, x1, y1);
            if (y2 + 1 <= M && bd[x1][y2] == 0 && bd[x1][y2 + 1] == 0)
                ysum -= merge(x1, y2 + 1, x1, y2);

            for (int j = y1; j <= y2; j++) {
                if (x1 - 1 >= 1 && bd[x1][j] == 0 && bd[x1 - 1][j] == 0)
                    ysum -= merge(x1 - 1, j, x1, j);
                if (x1 + 1 <= N && bd[x1][j] == 0 && bd[x1 + 1][j] == 0)
                    ysum -= merge(x1 + 1, j, x1, j);
            }
            cnt += ysum;
        }
        else {
            if (x1 > x2)
                swap(x1, x2);

            int xsum = 0;
            for (int j = x1; j < x2; j++) {
                if (bd[j][y1] != 0 || bd[j + 1][y1] != 0)
                    continue;
                merge(j, y1, j + 1, y1);
            }
            for (int j = x1; j <= x2; j++) {
                if (bd[j][y1] != 0)
                    continue;

                if (pt[xyToidx(j, y1)] == xyToidx(j, y1))
                    xsum++;
            }
            if (x1 - 1 >= 1 && bd[x1][y1] == 0 && bd[x1 - 1][y1] == 0)
                xsum -= merge(x1 - 1, y1, x1, y1);
            if (x2 + 1 <= N && bd[x2][y1] == 0 && bd[x2 + 1][y1] == 0)
                xsum -= merge(x2 + 1, y1, x2, y1);

            for (int j = x1; j <= x2; j++) {
                if (y1 - 1 >= 1 && bd[j][y1] == 0 && bd[j][y1 - 1] == 0)
                    xsum -= merge(j, y1 - 1, j, y1);
                if (y1 + 1 <= M && bd[j][y1] == 0 && bd[j][y1 + 1] == 0)
                    xsum -= merge(j, y1 + 1, j, y1);
            }
            cnt += xsum;
        }
        ret.push_back(cnt);
    }
    for (int i = ret.size() - 2; i >= 0; i--)
        printf("%d\n", ret[i]);
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N >> M >> Q;
    cin >> N >> M >> Q;

    for (int i = 1; i <= N * M; i++)
        pt[i] = i;

    for (int x1,y1,x2,y2,i = 0; i < Q; i++) {
        //inf >> x1 >> y1 >> x2 >> y2;
        cin >> x1 >> y1 >> x2 >> y2;
        
        paint({ x1,y1,x2,y2 }, 1);
        p.push_back({ x1,y1,x2,y2 });
    }
    solve();

    return 0;
}