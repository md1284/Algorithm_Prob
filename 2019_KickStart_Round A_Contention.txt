#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>

using namespace std;

int T, N, Q;
int mrange;
vector<pair<int, int> > B;

bool inspector(int k) {
	int left[30001], right[30001], posleft[30001];
	int pos, prevpos;
	
	for(int i = 0; i<Q; i++) {
		left[i] = B[i].first;
		right[i] = -B[i].second;
		posleft[i] = B[i].first;
	}
	
	for(int i = 0; i<Q; i++) {
		int cnt = 0;
		pos = posleft[i];
		prevpos = pos;
		
		for(int j = i+1; j<Q; j++) {
			if(right[i] < pos)
				break;
			
			if(pos < left[j]) {
				prevpos = pos;
				
				cnt += min(left[j], right[i]+1) - pos;
				pos = right[j] + 1;
				
				prevpos = max(prevpos, left[j]);
			}
			else if(left[j] <= pos && pos <= right[j]) {
				prevpos = pos;
				
				pos = right[j] + 1;
				prevpos = max(prevpos, left[j]);
			}
				
				
			if(right[i] < pos) {
				if(cnt >= k)	break;
				
				pos = prevpos;
				posleft[j] = max(posleft[j], right[i]+1);
			}
		}
		
		if(pos <= right[i])
			cnt += right[i] - pos + 1;

		if(cnt < k)
			return false;
	}
	return true;
}

int solve() {
	sort(B.begin(), B.end());
    
	int mid, le = 0, hi = mrange+1;
	while(le <= hi) {
    		mid = (le + hi) / 2;
    	
    		if(inspector(mid) == true)
    			le = mid + 1;
    		else
    			hi = mid - 1;
	}
	return hi;
}

int main() {
	scanf("%d", &T);
	//fstream inf("prob.txt");
	//inf >> T;

	for(int i = 1; i<=T; i++) {
		scanf("%d %d", &N, &Q);
           		//inf >> N >> Q;
	
		B.clear();
		mrange = -1;
		
		int a, b;
		for(int j = 0; j<Q; j++) {
			//inf >> a >> b;
			scanf("%d %d", &a, &b);
            		B.push_back(make_pair(a, -b));
           			mrange = max(mrange, b-a+1);
		}
		
		printf("Case #%d: %d\n", i, solve());
	}
		
	return 0;
}
