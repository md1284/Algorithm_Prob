#include <iostream>
#include <vector>
#include <fstream>

using namespace std;

const int S = 1e5;
int N, M;
int d[S+5], anc[S+5][22];
bool visited[S+5];
vector<int> Tree[S+5];

void dfs(int here, int depth) {
	visited[here] = true;
	d[here] = depth;
	
	for(int i = 0; i<Tree[here].size(); i++) {
		int next = Tree[here][i];
		if(visited[next] == true)	continue;
		
		anc[next][0] = here;
		dfs(next, depth+1);
	}
}

void btup() {
	for(int i = 1; i<=21; i++) {
		for(int j = 1; j<=N; j++)
			anc[j][i] = anc[anc[j][i-1]][i-1];
	}
}

int lca(int a, int b) {
	if(d[b] < d[a])
		swap(a, b);

	for(int i = 21; i>=0; i--) {
		if(d[a] <= d[anc[b][i]])
			b = anc[b][i];
	}
	if(a == b)	return a;
	
	for(int i = 21; i>=0; i--) {
		if(anc[a][i] != anc[b][i]) {
			a = anc[a][i];
			b = anc[b][i];
		}
	}

	return anc[a][0];
}


int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	//fstream inf("prob.txt");
	//inf >> N;
	cin >> N;
	
	for(int i = 1; i<N; i++) {
		int a, b;
		//inf >> a >> b;
		cin >> a >> b;
		Tree[a].push_back(b);
		Tree[b].push_back(a);
	}
	dfs(1, 1);
	btup();
	
	//inf >> M;
	cin >> M;
	for(int i = 1; i<=M; i++) {
		int a, b;
		//inf >> a >> b;
		cin >> a >> b;
		
		printf("%d\n", lca(a, b));
	}
	
	return 0;
}