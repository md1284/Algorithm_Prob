#include <iostream>
#include <algorithm>
#include <fstream>

using namespace std;

typedef long long ll;

const int mod = 1e9 + 7;
int c, n;
ll DP[105];

ll solve() {
    for (int i = 0; i <= n; i++)
        DP[i] = 0;
    DP[0] = 1;
    DP[1] = 1;
    DP[2] = 1;

    for (int i = 1; i <= n; i++) {
        DP[i + 1] += DP[i];
        DP[i + 2] += DP[i];

        DP[i + 1] %= mod;
        DP[i + 2] %= mod;
        //printf("i:%d update: DP[%d]=%d, DP[%d]=%d\n", i, i + 1, DP[i + 1], i + 2, DP[i + 2]);
    }

    ll ret;
    if (n & 1) {
        ret = DP[n] - DP[n / 2];
        if (ret < 0)
            ret += mod;
    }
    else {
        ret = DP[n] - DP[n / 2];
        if (ret < 0)
            ret += mod;
        ret -= DP[n / 2 - 1];
        if (ret < 0)
            ret += mod;
    }
    return ret;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> c;
    cin >> c;

    for (int i = 0; i < c; i++) {
        //inf >> n;
        cin >> n;

        printf("%lld\n", solve());
    }

    return 0;
}