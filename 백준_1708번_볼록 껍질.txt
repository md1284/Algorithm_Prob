#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <fstream>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

int N;
vector<pii> p;

ll ccw(const pii& a, const pii& b, const pii& c) {
    return (ll)((ll)b.first - a.first) * ((ll)c.second - a.second) - ((ll)b.second - a.second) * ((ll)c.first - a.first);
}

ll dist(const pii& a, const pii& b) {
    return ((ll)a.first - b.first) * ((ll)a.first - b.first) + ((ll)a.second - b.second) * ((ll)a.second - b.second);
}

bool cmp(const pii& a, const pii& b) {
    if (ccw(p[0], a, b) == 0)
        return dist(a, p[0]) < dist(b, p[0]);
    return ccw(p[0], a, b) > 0;
}

int solve() {
    int idx = 0, y = 1e9;
    for (int i = 0; i < N; i++) {
        if (y > p[i].second) {
            idx = i;
            y = p[i].second;
        }
    }
    swap(p[0], p[idx]);
    sort(p.begin() + 1, p.end(), cmp);

    vector<pii> st;
    st.push_back(p[0]);
    st.push_back(p[1]);

    for (int i = 2; i < N; i++) {
        while (st.size() >= 2 && ccw(st[st.size() - 2], st.back(), p[i]) <= 0)
            st.pop_back();
        st.push_back(p[i]);
    }
    return st.size();
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N;
    cin >> N;

    for (int x,y,i = 0; i < N; i++) {
        //inf >> x >> y;
        cin >> x >> y;

        p.push_back({ x, y });
    }
    printf("%d", solve());

    return 0;
}