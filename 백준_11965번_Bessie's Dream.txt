#include <iostream>
#include <queue>
#include <fstream>

using namespace std;

struct Point {
    int y, x, t, d;
    int cost;
};

const int S = 1000;
int N, M;
int bd[S + 5][S + 5];
bool visited[S + 5][S + 5][2][5];
int mv[5][2] = {
    {0, 0}, // 0 dummy
    {0, 1}, // 1 right
    {1, 0}, // 2 down
    {0, -1}, // 3 left
    {-1, 0} // 4 up
};

bool check(int y, int x, int t, int d) {
    if (y < 1 || y > N || x < 1 || x > M)
        return false;
    if (bd[y][x] == 0 || visited[y][x][t][d] == true)
        return false;
    if (bd[y][x] == 3 && t == 0)
        return false;
    return true;
}

int bfs() {
    queue<Point> q;
    q.push({ 1,1,0,0,0 });

    while (!q.empty()) {
        int y = q.front().y;
        int x = q.front().x;
        int t = q.front().t;
        int d = q.front().d;
        int cost = q.front().cost;
        q.pop();

        if (visited[y][x][t][d] == true)
            continue;
        if (y == N && x == M)
            return cost;
        visited[y][x][t][d] = true;

        if (bd[y][x] == 2)
            t = 1;
        if (bd[y][x] == 4) {
            t = 0;
            int ny = y + mv[d][0];
            int nx = x + mv[d][1];

            if (check(ny, nx, t, d) == true) {
                q.push({ ny, nx, t, d, cost + 1 });
                continue;
            }
        }

        for (int type = 1; type <= 4; type++) {
            int ny = y + mv[type][0];
            int nx = x + mv[type][1];

            if (check(ny, nx, t, type) == false)
                continue;

            q.push({ ny, nx, t, type, cost + 1 });
        }
    }
    return -1;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N >> M;
    cin >> N >> M;

    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= M; j++) {
            //inf >> bd[i][j];
            cin >> bd[i][j];
        }
    }
    printf("%d", bfs());

    return 0;
}