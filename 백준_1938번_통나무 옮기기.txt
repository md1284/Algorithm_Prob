#include <iostream>
#include <queue>
#include <algorithm>
#include <fstream>

using namespace std;

struct Point {
    int y, x, d, cnt;
};

const int INF = 2e9;
int N;
int ey, ex, ed, dp[51][51][2];
char bd[51][51];
bool visited[51][51][2];

bool check(int y, int x, int d, int type) {
    if (type == 0) {
        if (d == 0) {
            if (y - 1 < 1)
                return false;
            if (bd[y - 1][x - 1] == 1 || bd[y - 1][x] == 1 || bd[y - 1][x + 1] == 1)
                return false;
            return true;
        }
        else {
            if (y - 2 < 1)
                return false;
            if (bd[y - 2][x] == 1)
                return false;
            return true;
        }
    }
    else if (type == 1) {
        if (d == 0) {
            if (y + 1 > N)
                return false;
            if (bd[y + 1][x - 1] == 1 || bd[y + 1][x] == 1 || bd[y + 1][x + 1] == 1)
                return false;
            return true;
        }
        else {
            if (y + 2 > N)
                return false;
            if (bd[y + 2][x] == 1)
                return false;
            return true;
        }
    }
    else if (type == 2) {
        if (d == 0) {
            if (x - 2 < 1)
                return false;
            if (bd[y][x - 2] == 1)
                return false;
            return true;
        }
        else {
            if (x - 1 < 1)
                return false;
            if (bd[y - 1][x - 1] == 1 || bd[y][x - 1] == 1 || bd[y + 1][x - 1] == 1)
                return false;
            return true;
        }
    }
    else if (type == 3) {
        if (d == 0) {
            if (x + 2 > N)
                return false;
            if (bd[y][x + 2] == 1)
                return false;
            return true;
        }
        else {
            if (x + 1 > N)
                return false;
            if (bd[y - 1][x + 1] == 1 || bd[y][x + 1] == 1 || bd[y + 1][x + 1] == 1)
                return false;
            return true;
        }
    }
    else {
        if (d == 0) {
            if (check(y, x, 0, 0) == false || check(y, x, 0, 1) == false)
                return false;
            return true;
        }
        else {
            if (check(y, x, 1, 2) == false || check(y, x, 1, 3) == false)
                return false;
            return true;
        }
    }
}

void bfs(int y, int x, int d) {
    queue<Point> q;
    q.push({ y,x,d,0 });

    while (!q.empty()) {
        Point c = q.front();
        q.pop();

        if (visited[c.y][c.x][c.d] == true)
            continue;
        visited[c.y][c.x][c.d] = true;
        dp[c.y][c.x][c.d] = min(dp[c.y][c.x][c.d], c.cnt);

        for (int type = 0; type < 5; type++) {
            if (check(c.y, c.x, c.d, type) == true) {
                int ny = c.y, nx = c.x, nd = c.d;
                if (type == 0)
                    ny--;
                else if (type == 1)
                    ny++;
                else if (type == 2)
                    nx--;
                else if (type == 3)
                    nx++;
                else
                    nd = (c.d == 0 ? 1 : 0);

                if (visited[ny][nx][nd] == true)
                    continue;
                q.push({ ny, nx, nd, c.cnt + 1 });
            }
        }
    }
}

int solve() {
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            dp[i][j][0] = dp[i][j][1] = INF;
        }
    }
    int y = 1, x = 1, d = 0;
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            if (bd[i][j] == 'B') {
                if (i - 1 >= 1 && i + 1 <= N && bd[i - 1][j] == 'B' && bd[i + 1][j] == 'B') {
                    y = i;
                    x = j;
                    d = 1;
                }
                else if (j - 1 >= 1 && j + 1 <= N && bd[i][j - 1] == 'B' && bd[i][j + 1] == 'B') {
                    y = i;
                    x = j;
                    d = 0;
                }
            }
            if (bd[i][j] == 'E') {
                if (i - 1 >= 1 && i + 1 <= N && bd[i - 1][j] == 'E' && bd[i + 1][j] == 'E') {
                    ey = i;
                    ex = j;
                    ed = 1;
                }
                else if (j - 1 >= 1 && j + 1 <= N && bd[i][j - 1] == 'E' && bd[i][j + 1] == 'E') {
                    ey = i;
                    ex = j;
                    ed = 0;
                }
            }
        }
    }
    bfs(y, x, d);

    if (dp[ey][ex][ed] == INF)
        return 0;
    return dp[ey][ex][ed];
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N;
    cin >> N;
    
    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            //inf >> bd[i][j];
            cin >> bd[i][j];
            
            if (bd[i][j] != 'B' && bd[i][j] != 'E')
                bd[i][j] -= '0';
        }
    }
    printf("%d", solve());

    return 0;
}