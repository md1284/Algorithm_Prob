#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>
#include <fstream>

using namespace std;

typedef pair<int, int> pii;

// dp[u]: diameter of subtree with root(u)
// pdp[u]: idameter of reverse-subtree with root(u)
// dwd[u]: maximum depth of subtree with root(u)
// upd[u]: maximum dpeth of reverse-subtree with root(u)
const int S = 3e5, INF = 1e9;
int N;
int cs, ce, dia = INF;
int dp[S + 5], pdp[S + 5], upd[S + 5], dwd[S + 5], dist[S + 5], p[S + 5];
vector<int> adj[S + 5];
bool visited[S + 5];

void dfs(int here) {
    visited[here] = true;

    int d1 = 0, d2 = 0;
    for (int i = 0; i < adj[here].size(); i++) {
        int there = adj[here][i];

        if (visited[there] == true)
            continue;

        dfs(there);

        if (d1 < dwd[there] + 1) {
            d2 = d1;
            d1 = dwd[there] + 1;
        }
        else if (d2 < dwd[there] + 1)
            d2 = dwd[there] + 1;

        dp[here] = max(dp[here], dp[there]);
    }
    dp[here] = max(dp[here], d1 + d2);
    dwd[here] = max(dwd[here], d1);
}

void dfs2(int here) {
    visited[here] = true;
    vector<int> p;

    pii d1 = { 0, -1 }, d2 = { 0, -1 }, d3 = { 0, -1 };
    pii d4 = { 0, -1 }, d5 = { 0, -1 };
    for (int i = 0; i < adj[here].size(); i++) {
        int there = adj[here][i];

        if (visited[there] == true)
            continue;

        p.push_back(there);

        if (d4.first < dp[there]) {
            d5 = d4;
            d4 = { dp[there] , there };
        }
        else if (d5.first < dp[there])
            d5 = { dp[there], there };

        if (d1.first < dwd[there] + 1) {
            d3 = d2;
            d2 = d1;
            d1 = { dwd[there] + 1, there };
        }
        else if (d2.first < dwd[there] + 1) {
            d3 = d2;
            d2 = { dwd[there] + 1, there };
        }
        else if (d3.first < dwd[there] + 1)
            d3 = { dwd[there] + 1, there };
    }

    for (int i = 0; i < p.size(); i++) {
        int there = p[i];

        // diameter without [here]
        pdp[there] = max(pdp[there], pdp[here]);
        if (d4.second == there)
            pdp[there] = max(pdp[there], d5.first);
        else
            pdp[there] = max(pdp[there], d4.first);

        // diameter with [here]
        if (d1.second == there)
            pdp[there] = max(pdp[there], upd[here] + d2.first);
        else
            pdp[there] = max(pdp[there], upd[here] + d1.first);

        if (d1.second != there && d2.second != there && d3.second != there)
            pdp[there] = max(pdp[there], d1.first + d2.first);
        else {
            if (d1.second == there)
                pdp[there] = max(pdp[there], d2.first + d3.first);
            else if (d2.second == there)
                pdp[there] = max(pdp[there], d1.first + d3.first);
            else
                pdp[there] = max(pdp[there], d1.first + d2.first);
        }

        // update upd[there]
        upd[there] = max(upd[there], upd[here] + 1);
        if (d1.second == there)
            upd[there] = max(upd[there], d2.first + 1);
        else
            upd[there] = max(upd[there], d1.first + 1);

        // calculate dia
        int a = (dp[there] + 1) / 2, b = (pdp[there] + 1) / 2;
        int cand = max(dp[there], pdp[there]);
        cand = max(cand, a + b + 1);
        if (dia > cand) {
            dia = cand;
            cs = here;
            ce = there;
        }

        dfs2(there);
    }
}

int bfs(int st, int fd) {
    for (int i = 1; i <= N; i++)
        dist[i] = INF;
    queue<int> q;
    q.push(st);
    dist[st] = 0;

    while (!q.empty()) {
        int here = q.front();
        q.pop();

        for (int i = 0; i < adj[here].size(); i++) {
            int there = adj[here][i];

            if (dist[there] != INF || there == fd)
                continue;

            dist[there] = dist[here] + 1;
            p[there] = here;
            q.push(there);
        }
    }
    int ret = st;
    for (int i = 1; i <= N; i++) {
        if (dist[i] != INF && dist[ret] < dist[i])
            ret = i;
    }
    return ret;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N;
    cin >> N;

    for (int a, b, i = 0; i < N - 1;i++) {
        //inf >> a >> b;
        cin >> a >> b;

        adj[a].push_back(b);
        adj[b].push_back(a);
    }

    dfs(1);
    memset(visited, 0, sizeof(visited));
    dfs2(1);

    printf("%d\n", dia);
    printf("%d %d\n", cs, ce);

    int rs, re;

    int a = bfs(cs, ce);
    int b = bfs(a, ce);
    rs = b;
    for (int i = 0; i < dist[b] / 2; i++)
        rs = p[rs];

    int c = bfs(ce, cs);
    int d = bfs(c, cs);
    re = d;
    for (int i = 0; i < dist[d] / 2; i++)
        re = p[re];

    printf("%d %d", rs, re);

    return 0;
}