#include <iostream>
#include <vector>
#include <algorithm>
#include <string.h>

using namespace std;

int c, k;
vector<string> s;
int cache[16][1<<16];
int overlap[16][16];

bool inspection(string str) {
	if(s.size() == 0)	return false;
	
	for(int i = 0; i<s.size(); i++) {
		if(s[i].find(str) != string::npos || str.find(s[i]) != string::npos) {
			if(s[i].size() < str.size()) {
				s.erase(s.begin() + i);
				return false;
			}
			else
				return true;
		}
		
	}
	return false;
}

int prev(string s1, string s2) {
	int n = s1.size(), m = s2.size();
	int len = min(n, m);
	int ret = 0;
	
	for(int i = 0; i<len; i++) {
		bool check = true;
		for(int j = 0; j<=i; j++) {
			if(s2[j] != s1[n-i+j-1]) {
				check = false;
				break;
			}
		}
		if(check == true) {
			ret = i + 1;
		}
	}
	return ret;
}

int solve(int last, int used) {
	if(used == (1<<k)-1)	return 0;
	
	int& ret = cache[last+1][used];
	if(ret != -1)	return ret;
	ret = 0;
	
	if(last == -1) {
		for(int next = 0; next<k; next++)
			ret = max(ret, solve(next, used + (1<<next)));
		return ret;
	}
	
	for(int next = 0; next<k; next++) {
		if((used & (1<<next)) == 0)
			ret = max(ret , overlap[last][next] + solve(next, used + (1<<next)));

	}

	return ret;
}

string reconstruct(int last, int used) {
	if(used == (1<<k)-1)	return "";
	
	if(last == -1) {
		for(int next = 0; next<k; next++) {
			if(solve(next, used + (1<<next)) == solve(last, used)) {
				return s[next] + reconstruct(next, used+(1<<next));
			}
		}
	}
	
	for(int next = 0; next<k; next++) {
		if(solve(next, used + (1<<next)) + overlap[last][next] == solve(last, used)) {
			return (s[next].substr(overlap[last][next]) + reconstruct(next, used + (1<<next)));
		}
	}
}

int main() {
	cin >> c;
	
	for(int i = 0; i<c; i++) {
		cin >> k;
		memset(cache, -1, sizeof(cache));
		memset(overlap, -1, sizeof(overlap));
		
		for(int j = 0; j<k; j++) {
			string str;
			cin >> str;
			
			if(!inspection(str))
				s.push_back(str);
		}
		for(int j = 0; j<k; j++) {
			for(int l = 0; l<k; l++) {
				if(j == l)	continue;
				overlap[j][l] = prev(s[j], s[l]);
			}
		}
		int len = solve(-1, 0);
		cout << reconstruct(-1, 0) << endl;
		
		s.clear();
	}

	return 0;
}