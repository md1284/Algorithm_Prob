#include <iostream>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef pair<ll,int> pli;

const int S = 1e6;
int N;
pli a[S+5];
ll Tree[4*S+5];

void update(int b, int s, int e, int n, int x) {
    if(n < s || e < n)
        return;
    
    if(s == e) {
        Tree[b] = 1;
        return;
    }
    int mid = (s+e)/2;
    update(b*2, s, mid, n, x);
    update(b*2+1, mid+1, e, n, x);
    Tree[b] = Tree[b*2] + Tree[b*2+1];
}

ll get(int b, int s, int e, int l, int r) {
    if(r < s || e < l)
        return 0;
    if(l <= s && e <= r)
        return Tree[b];
    
    int mid = (s+e)/2;
    return get(b*2, s, mid, l, r) + get(b*2+1, mid+1, e, l, r);
}

ll solve() {
    sort(a+1, a+N+1);

    ll ret = 0;
    for(int i = 1; i<=N; i++) {
        int idx = a[i].second;
        update(1,1,N,idx,1);

        ret += get(1,1,N,idx,N)-1;
    }
    return ret;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cin >> N;

    for(int i = 1; i<=N; i++) {
        ll x;
        cin >> x;

        a[i] = {x,i};
    }
    cout << solve() << '\n';
 
    return 0;
}