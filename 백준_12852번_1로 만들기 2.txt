#include <iostream>
#include <algorithm>
#include <fstream>

using namespace std;

const int S = 1e6, INF = 1e9;
int N;
int dp[3 * S + 5];

void solve() {
    for (int i = 0; i <= N; i++)
        dp[i] = INF;
    dp[1] = 0;
    for (int i = 0; i <= N; i++) {
        dp[i * 2] = min(dp[i * 2], dp[i] + 1);
        dp[i * 3] = min(dp[i * 3], dp[i] + 1);
        dp[i + 1] = min(dp[i + 1], dp[i] + 1);
    }

    printf("%d\n", dp[N]);
    int ret = N;
    while (ret != 1) {
        printf("%d ", ret);
        if (ret % 3 == 0 && dp[ret] == dp[ret / 3] + 1)
            ret = ret / 3;
        else if (ret % 2 == 0 && dp[ret] == dp[ret / 2] + 1)
            ret = ret / 2;
        else
            ret--;
    }
    printf("%d", ret);
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N;
    cin >> N;

    solve();

    return 0;
}