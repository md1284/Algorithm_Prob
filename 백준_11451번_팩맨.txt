#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
#include <fstream>

using namespace std;

typedef pair<int, int> pii;

struct Point {
    pii p1, p2;
    int cost;
    vector<char> p;
};

int T;
int M, N;
int dp[51][51][51][51];
char bd[51][51];
bool visited[51][51][51][51];
pii s1, s2;
int mv[4][2] = {
    {0, 1}, // E
    {1, 0}, // S
    {0, -1},    // W
    {-1, 0}     // N
};

void bfs() {
    queue<Point> q;
    q.push({ s1, s2, 0 });
    int ret = -1;
    vector<char> pr;

    while (!q.empty()) {
        pii p1 = q.front().p1;
        pii p2 = q.front().p2;
        int cost = q.front().cost;
        vector<char> p = q.front().p;
        q.pop();

        if (p1 == p2) {
            ret = cost;
            pr = p;
            break;
        }

        if (p1 > p2)
            swap(p1, p2);
        if (visited[p1.first][p1.second][p2.first][p2.second] == true)
            continue;
        visited[p1.first][p1.second][p2.first][p2.second] = true;
        dp[p1.first][p1.second][p2.first][p2.second] = cost;

        for (int type = 0; type < 4; type++) {
            pii n1 = { p1.first + mv[type][0], p1.second + mv[type][1] };
            pii n2 = { p2.first + mv[type][0], p2.second + mv[type][1] };

            if (n1.first < 0)
                n1.first += M;
            if (n2.first < 0)
                n2.first += M;
            if (n1.second < 0)
                n1.second += N;
            if (n2.second < 0)
                n2.second += N;

            n1.first %= M;
            n2.first %= M;
            n1.second %= N;
            n2.second %= N;

            if (bd[n1.first][n1.second] == 'X')
                n1 = p1;
            if (bd[n2.first][n2.second] == 'X')
                n2 = p2;
            if (bd[n1.first][n1.second] == 'G' || bd[n2.first][n2.second] == 'G')
                continue;
            if (n1 > n2)
                swap(n1, n2);
            if (visited[n1.first][n1.second][n2.first][n2.second] == true)
                continue;

            vector<char> pt = p;
            if (type == 0)
                pt.push_back('E');
            else if (type == 1)
                pt.push_back('S');
            else if (type == 2)
                pt.push_back('W');
            else
                pt.push_back('N');
            q.push({ n1, n2, cost + 1, pt });
        }
    }

    if (ret == -1) {
        printf("IMPOSSIBLE\n");
        return;
    }
    printf("%d ", ret);
    for (int i = 0; i < pr.size(); i++)
        printf("%c", pr[i]);
    printf("\n");
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> T;
    cin >> T;

    for (int i = 0; i < T; i++) {
        //inf >> M >> N;
        cin >> M >> N;

        memset(visited, 0, sizeof(visited));
        memset(dp, 0, sizeof(dp));
        memset(bd, 0, sizeof(bd));
        s1 = { 0, 0 }, s2 = { 0,0 };

        for (int j = 0; j < M; j++) {
            for (int k = 0; k < N; k++) {
                //inf >> bd[j][k];
                cin >> bd[j][k];

                if (bd[j][k] == 'P' && s1 == make_pair(0, 0))
                    s1 = { j, k };
                else if (bd[j][k] == 'P')
                    s2 = { j, k };
            }
        }
        //printf("%d %d, %d %d\n", s1.first, s1.second, s2.first, s2.second);
        bfs();
    }

    return 0;
}