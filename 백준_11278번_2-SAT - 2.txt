#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <fstream>

using namespace std;

typedef pair<int, int> pii;

int N, M;
int time, sccCount;
int discovered[51], sccId[51], ans[51];
vector<int> adj[51];
vector<pii> p;
vector<vector<int>> scc;
stack<int> st;

int dfs(int here) {
    int ret = discovered[here] = ++time;
    st.push(here);

    for (int i = 0; i < adj[here].size(); i++) {
        int there = adj[here][i];

        if (discovered[there] == 0)
            ret = min(ret, dfs(there));
        else if (discovered[there] < discovered[here] && sccId[there] == 0)
            ret = min(ret, discovered[there]);
    }
    if (ret == discovered[here]) {
        vector<int> tmp;
        sccCount++;

        while (true) {
            int t = st.top();
            st.pop();
            sccId[t] = sccCount;

            tmp.push_back(t);
            if (t == here)
                break;
        }
        scc.push_back(tmp);
    }
    return ret;
}

void solve() {
    for (int i = 2; i <= N * 2 + 1; i++) {
        if (discovered[i] != 0)
            continue;
        dfs(i);
    }
    bool check = true;
    for (int i = 1; i <= N; i++) {
        if (sccId[i * 2] == sccId[i * 2 + 1]) {
            check = false;
            break;
        }
    }
    if (check == false) {
        printf("0");
        return;
    }
    else
        printf("1\n");

    for (int i = 2; i <= N * 2 + 1; i++)
        p.push_back({ sccId[i], i });
    sort(p.begin(), p.end());

    for (int i = 1; i <= N; i++)
        ans[i] = -1;

    for (int i = p.size() - 1; i >= 0; i--) {
        int t = p[i].second;

        if (ans[t / 2] == -1) {
            if (t % 2 == 0)
                ans[t / 2] = 0;
            else
                ans[t / 2] = 1;
        }
    }

    for (int i = 1; i <= N; i++)
        printf("%d ", ans[i]);
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N >> M;
    cin >> N >> M;

    for (int s,e,s1,e1,i = 0; i < M; i++) {
        //inf >> s >> e;
        cin >> s >> e;

        if (s < 0)
            s = (-s) * 2 + 1;
        else
            s = s * 2;
        if (e < 0)
            e = (-e) * 2 + 1;
        else
            e = e * 2;

        if (s % 2 == 0)
            s1 = s + 1;
        else
            s1 = s - 1;
        if (e % 2 == 0)
            e1 = e + 1;
        else
            e1 = e - 1;

        adj[s1].push_back(e);
        adj[e1].push_back(s);
    }
    solve();

    return 0;
}