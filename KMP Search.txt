#include <iostream>
#include <vector>

using namespace std;

// aabaabac
//  aabaabac
//   aabaabac
//    aabaabac

// KMP Search Algorithm

vector<int> getPartialMatch(const string& N) {
	int n = N.size();
	int begin = 1, matched = 0;
	vector<int> pi(n, 0);
	
	while(begin + matched < n) {
		if(N[begin + matched] == N[matched]) {
			matched++;
			pi[begin + matched - 1] = matched;	
		}
		else {
			if(matched == 0)
				begin++;
			else {
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	return pi;
}

vector<int> KMPSearch(const string& H, const string& N) {
	int n = H.size(), m = N.size();
	int begin = 0, matched = 0;
	vector<int> pi = getPartialMatch(N);
	vector<int> ret;
	
	while(begin <= n-m) {
		if(matched < m && H[begin + matched] == N[matched]) {
			matched++;
			if(matched == m)	ret.push_back(begin);
		}
		else {
			if(matched == 0)
				begin++;
			else {
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	
	return ret;
}

int main() {
	string H = "abcedfaabaabacaabaabaabaccedf";
	string N = "aabaabac";
	
	vector<int> ret = KMPSearch(H, N);
	for(int i = 0; i<ret.size(); i++)
		cout << ret[i] << endl;
		
	return 0;
}