#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>

using namespace std;

typedef pair<int, int> pii;

const int INF = 2e9;
int N;
vector<pii> p;

bool cmp(const pii& a, const pii& b) {
    if (a.second == b.second)
        return a.first < b.first;
    return a.second < b.second;
}

int dist(const pii& a, const pii& b) {
    return (a.first - b.first) * (a.first - b.first) + (a.second - b.second) * (a.second - b.second);
}

int query(int l, int r, vector<pii>& y) {
    if (r - l + 1 == 2)
        return dist(p[l], p[r]);
    if (r - l + 1 == 3)
        return min(dist(p[l], p[l + 1]), min(dist(p[l + 1], p[r]), dist(p[l], p[r])));

    int mid = (l + r) / 2;
    vector<pii> yl, yr;
    for (int i = 0; i < y.size(); i++) {
        if (y[i].first <= p[mid].first)
            yl.push_back(y[i]);
        else
            yr.push_back(y[i]);
    }

    int d = min(query(l, mid, yl), query(mid + 1, r, yr));
    vector<pii> cp;
    for (int i = 0; i < y.size(); i++) {
        if (p[mid + 1].first > y[i].first && p[mid + 1].first - y[i].first <= d)
            cp.push_back(y[i]);
        if (p[mid].first < y[i].first && y[i].first - p[mid].first <= d)
            cp.push_back(y[i]);
    }
    int ret = INF;
    for (int i = 0; i < cp.size(); i++) {
        for (int j = i + 1; j < cp.size(); j++) {
            if (dist(cp[i], cp[j]) > d)
                break;
            ret = min(ret, dist(cp[i], cp[j]));
        }
    }
    return min(ret, d);
}

int solve() {
    vector<pii> y = p;
    sort(p.begin(), p.end());
    sort(y.begin(), y.end(), cmp);
    return query(0, N - 1, y);
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N;
    cin >> N;

    for (int a, b, i = 0; i < N; i++) {
        //inf >> a >> b;
        cin >> a >> b;

        p.push_back({ a,b });
    }
    printf("%d", solve());

    return 0;
}