#include <iostream>
#include <algorithm>
#include <fstream>

using namespace std;

const int S = 1e5, INF = 1e9;
int N;
int w[17][17], dp[17][S + 5];
int done;

int dfs(int here, int visited) {
    if (dp[here][visited] != INF)
        return dp[here][visited];

    if (visited == done) {
        if(w[here][0] != 0)
            return w[here][0];
        return INF;
    }

    for (int i = 0; i < N; i++) {
        if (w[here][i] == 0)
            continue;
        if ((visited & (1 << i)))
            continue;

        dp[here][visited] = min(dp[here][visited], dfs(i, visited | (1 << i)) + w[here][i]);
    }
    return dp[here][visited];
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N;
    cin >> N;

    done = (1 << N) - 1;
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < (1 << N); j++)
            dp[i][j] = INF;
    }

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            //inf >> w[i][j];
            cin >> w[i][j];
        }
    }
    printf("%d", dfs(0, 1));

    return 0;
}