#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <fstream>

using namespace std;

typedef pair<int, int> pii;

int N, W;
int dp[1005][1005];
vector<pii> p;

int dist(const pii& a, const pii& b) {
    return abs(a.first - b.first) + abs(a.second - b.second);
}

int solve(int idx1, int idx2) {
    if (idx1 == W + 1 || idx2 == W + 1)
        return 0;

    int& ret = dp[idx1][idx2];
    if (ret != -1)
        return ret;

    int index = max(idx1, idx2) + 1;
    ret = solve(index, idx2) + dist(p[idx1], p[index]);
    ret = min(ret, solve(idx1, index) + dist(p[idx2], p[index]));

    return ret;
}

void reconstruct(int idx1, int idx2) {
    if (idx1 == W + 1 || idx2 == W + 1)
        return;
    
    int index = max(idx1, idx2) + 1;
    if (solve(idx1, idx2) == solve(index, idx2) + dist(p[idx1], p[index])) {
        printf("1\n");
        reconstruct(index, idx2);
    }
    else {
        printf("2\n");
        reconstruct(idx1, index);
    }
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N >> W;
    cin >> N >> W;

    p.push_back({ 1,1 });
    p.push_back({ N,N });
    for (int y,x,i = 0; i < W; i++) {
        //inf >> y >> x;
        cin >> y >> x;

        p.push_back({ y,x });
    }
    for (int i = 0; i < W + 2; i++) {
        for (int j = 0; j < W + 2; j++)
            dp[i][j] = -1;
    }
    printf("%d\n", solve(0, 1));
    reconstruct(0, 1);

    return 0;
}