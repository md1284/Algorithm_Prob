#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <fstream>

using namespace std;

const int MX = 1e5;
int N, S, D;
int time = 1, ret, ch[MX + 5];
vector<int> adj[MX + 5];
bool visited[MX + 5];

int dfs(int here) {
    visited[here] = true;
    int cnt = 0;

    for (int i = 0; i < adj[here].size(); i++) {
        int there = adj[here][i];

        if (visited[there] == true)
            continue;

        cnt = max(cnt, dfs(there) + 1);
    }
    ch[here] = cnt;
    return ch[here];
}

void dfs2(int here) {
    visited[here] = true;
    ret++;

    for (int i = 0; i < adj[here].size(); i++) {
        int there = adj[here][i];

        if (visited[there] == true)
            continue;
        if (ch[there] < D)
            continue;

        dfs2(there);
    }
    ret++;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N >> S >> D;
    cin >> N >> S >> D;

    for (int x, y, i = 0; i < N - 1; i++) {
        //inf >> x >> y;
        cin >> x >> y;

        adj[x].push_back(y);
        adj[y].push_back(x);
    }
    dfs(S);
    memset(visited, 0, sizeof(visited));
    dfs2(S);

    printf("%d", ret - 2);

    return 0;
}