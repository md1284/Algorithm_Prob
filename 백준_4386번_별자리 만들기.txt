#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cmath>
#include <fstream>

using namespace std;

const int INF = 987654321;
int N;
bool selected[105];
vector<pair<pair<double,double>,int>> coordinate;
vector<pair<double,int>> adj[105];

double dist(pair<double,double> p1, pair<double,double> p2) {
	return sqrt((p1.first-p2.first)*(p1.first-p2.first)+(p1.second-p2.second)*(p1.second-p2.second));
}

double prim() {
	for(int i = 0; i<N; i++) {
		for(int j = i+1; j<N; j++) {
			double d = dist(coordinate[i].first,coordinate[j].first);
			adj[i+1].push_back({d,j+1});
			adj[j+1].push_back({d,i+1});
		}
	}
	
	double ret = 0;
	priority_queue<pair<double,int>, vector<pair<double,int>>, greater<pair<double,int>>> pq;
	pq.push({0.0,1});
	
	for(int i = 0; i<N; i++) {
		int here;
		double cost = 1.0*INF;
		
		while(!pq.empty()) {
			here = pq.top().second;
			
			if(selected[here] == false) {
				cost = pq.top().first;
				break;
			}
			pq.pop();
		}
		if(cost == 1.0*INF)	return 1.0*INF;
		
		ret += cost;
		selected[here] = true;
		for(int j = 0; j<adj[here].size(); j++)
			pq.push(adj[here][j]);
	}
	return ret;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	//fstream inf("prob.txt");
	//inf >> N;
	cin >> N;
	
	double x, y;
	for(int i = 1; i<=N; i++) {
		//inf >> x >> y;
		cin >> x >> y;
		
		coordinate.push_back({{x,y}, i});
	}
	
	printf("%lf", prim());
	
	return 0;
}