#include <iostream>
#include <vector>
#include <complex>
#include <cmath>
#include <algorithm>

using namespace std;

typedef complex<double> base;

void fft(vector<base> &a, vector<base> &A) {
	int n = (int)a.size();
	if(n == 1) {
		A[0] = a[0];
		return;
	}
	
	vector<base> even(n/2), odd(n/2), Even(n/2), Odd(n/2);
	for(int i = 0; i < n / 2; i++) {
		even[i] = a[2 * i];
		odd[i] = a[2 * i + 1];
	}
	
	fft(even, Even);
	fft(odd, Odd);
	
	double th = 2.0 * M_PI / n;
	base w = base(cos(th), sin(th));
	base z = base(1);
	
	for(int i = 0; i < n / 2; i++) {
		A[i] = Even[i] + z * Odd[i];
		A[i + n / 2] = Even[i] - z * Odd[i];
		z *= w;
	}
}

void ifft(vector<base> &A, vector<base> &a) {
	reverse(++A.begin(), A.end());
	fft(A, a);
	int n = (int)a.size();
	for(int i = 0; i<n; i++)
		a[i] /= n;
}

vector<base> multiply(vector<base> &a, vector<base> &b) {
	int n = (int)max(a.size(), b.size());
	int i = 0;
	
	while((1 << i) < (n << 1)) i++;
	n = 1 << i;
	a.resize(n);
	b.resize(n);
	
	vector<base> A(n), B(n), C(n), ans(n);
		
	fft(a, A);
	fft(b, B);
	
	for(int i = 0; i<n; i++)
		C[i] = A[i] * B[i];
		
	ifft(C, ans);
	
	return ans;
}

int main() {
	vector<base> a, b, ans;
	a.push_back(1);
	a.push_back(4);
	b.push_back(2);
	b.push_back(6);
	
	
	cout << a[0] << " " << b[0] << endl;

	ans = multiply(a, b);
	
	for(int i = 0; i<ans.size(); i++)
		cout << ans[i] << endl;
	
	return 0;
}