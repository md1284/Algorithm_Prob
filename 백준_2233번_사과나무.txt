#include <iostream>
#include <vector>
#include <stack>
#include <fstream>

using namespace std;

const int S = 2e3;
int N, x, y;
int T[2*S+5], d[2*S+5], anc[2*S+5][16];
vector<int> Tree[2*S+5];
bool visited[2*S+5];

void prev(string &s) {
	stack<int> st;

	for(int i = 0; i<s.size(); ++i) {
		if(s[i] == '0') {
			st.push(i+1);
			T[i+1] = i+1;
		}
		else if(s[i] == '1') {
			int a = st.top();
			T[i+1] = a;
			st.pop();
			if(!st.empty()) {
				int b = st.top();
				Tree[a].push_back(b);
				Tree[b].push_back(a);
			}
		}
	}
}

void dfs(int here, int depth) {
	visited[here] = true;
	d[here] = depth;
	
	for(int i = 0; i<Tree[here].size(); ++i) {
		int next = Tree[here][i];
		if(visited[next] == true)	continue;
		
		anc[next][0] = here;
		dfs(next, depth+1);
	}
}

void btup() {
	for(int i = 1; i<=15; ++i) {
		for(int j = 1; j<=N; ++j)
			anc[j][i] = anc[anc[j][i-1]][i-1];
	}
}

void lca(int x, int y) {
	if(d[y] < d[x])	swap(x, y);
	
	for(int i = 15; i>=0; --i) {
		if(d[x] <= d[anc[y][i]])
			y = anc[y][i];
	}
	
	if(x == y) {
		for(int i = 1; i<=2*N; ++i)
			if(T[i] == x)	printf("%d ", i);
		return;
	}
	
	for(int i = 15; i>=0; --i) {
		if(anc[x][i] != anc[y][i]) {
			x = anc[x][i];
			y = anc[y][i];
		}
	}
	
	x = anc[x][0];
	for(int i = 1; i<=2*N; ++i)
		if(T[i] == x)	printf("%d ", i);
}

void solve() {
	dfs(1, 1);
	btup();
	lca(x, y);
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	//fstream inf("prob.txt");
	//inf >> N;
	cin >> N;
	
	string s;
	//inf >> s;
	cin >> s;
	prev(s);

	//inf >> x >> y;
	cin >> x >> y;
	x = T[x];
	y = T[y];
	solve();
	
	return 0;
}