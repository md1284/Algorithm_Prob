#include <iostream>
#include <vector>
#include <algorithm>
 
using namespace std;
 
typedef long long ll;
 
const int S = 1000, mod = 1e9+7;
int T, N, K;
vector<int> a;
ll fac[S+5];
 
void init() {
    fac[0] = 1;
    for(int i = 1; i<=S; i++)
        fac[i] = fac[i-1] * i % mod;
}
 
ll power(ll a, int b) {
	ll ret = 1;
	for(; b > 0; b >>= 1, a = a * a % mod) {
		if(b & 1)
			ret = ret * a % mod;
	}
	return ret;
}
 
ll inverse(ll a) {
	return power(a, mod - 2);
}
 
ll combination(int a, int b) {
	ll ret = fac[a];
	ret = ret * inverse(fac[a-b]) % mod;
	ret = ret * inverse(fac[b]) % mod;
 
	return ret;
}
 
ll solve() {
    sort(a.rbegin(), a.rend());
    
    if(K == N || a[K] != a[K-1])
        return 1;
    
    int st = K-1, ed = K;
 
    while(st > 0 && a[st] == a[st-1])
        st--;
    while(ed < N-1 && a[ed] == a[ed+1])
        ed++;
    
    return combination(ed-st+1, K-st);
}
 
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cin >> T;
 
    init();
    for(int i = 0; i<T; i++) {
        cin >> N >> K;
 
        for(int j = 0; j<N; j++) {
            int n;
            cin >> n;
            a.push_back(n);
        }
        cout << solve() << '\n';
        a.clear();
    }
 
    return 0;
}