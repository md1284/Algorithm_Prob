#include <stdio.h>
#include <vector>
#include <windows.h>

using namespace std;

vector<pair<int, int>> G[101];
int dist[101], visit[101];
int n, m, INF = 200000000;

int Dijk(int s, int e) {
	dist[s] = 0;
	int min, idx;

	for (int i = 1; i <= n; i++) {
		min = INF;

		for (int j = 1; j <= n; j++) {
			if (visit[j] == 0 && min > dist[j]) {
				min = dist[j];
				idx = j;
			}
		}

		visit[idx] = 1;

		for (int j = 0; j < G[idx].size(); j++) {
			if (dist[G[idx][j].first] > dist[idx] + G[idx][j].second) {
				dist[G[idx][j].first] = dist[idx] + G[idx][j].second;
			}
		}
	}

	if (dist[e] == INF)
		return 0;
	else
		return dist[e];
}

int main(void) {
	scanf("%d %d", &n, &m);

	for (int i = 0; i < m; i++) {
		int a, b, c;
		scanf("%d %d %d", &a, &b, &c);

		G[a].push_back(make_pair(b, c));
	}
	
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			if (i == j) {
				printf("0 ");
				continue;
			}

			for (int k = 1; k <= n; k++) {
				dist[k] = INF;
				visit[k] = 0;
			}
			printf("%d ", Dijk(i, j));
		}
		printf("\n");
	}

	system("pause");
	return 0;
}