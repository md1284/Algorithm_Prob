#include <iostream>
#include <fstream>
#include <string.h>
#include <vector>
#include <math.h>
#include <algorithm>

using namespace std;

const int INF = 987654321;
int t, n, m, p;

int toInteger(int n) {
	int ret = 0;
	int power = 1;
	
	while(n > 0) {
		if(n%10 == 1)
			ret += power;
			
		n /= 10;
		power *= 2;
	}
	
	return ret;
}


int complain(int a, vector<int> friends) {
	int ret = 0;
	int xo;
	
	for(int i = 0; i<n; i++) {
		xo = friends[i] ^ a;
		ret += __builtin_popcount(xo);
	}
	return ret;
}

int solve(vector<int> friends, vector<int> forbiden) {
	int len = pow(2, p);
	int ret = INF;

	vector<int>::iterator iter;
	
	for(int i = 0; i<len; i++) {
		iter = find(forbiden.begin(), forbiden.end(), i);
		if(iter != forbiden.end())
			continue;
		
		
		ret = min(ret, complain(i, friends));
	}
	
	return ret;
}


int main() {
    ifstream inf("B-large-practice.in");
    ofstream outf("output.txt");
	
	//cin >> t;
	inf >> t;
	
    for(int i = 0; i<t; i++) {
    	//cin >> n >> m >> p;
    	inf >> n >> m >> p;
    	
    	vector<int> friends(n, 0);
		vector<int> forbiden(m, 0);
    	
    	int buf;
    	for(int j = 0; j<n; j++) {
			//cin >> buf;
    		inf >> buf;
			friends[j] = toInteger(buf);
		}
		
    	for(int j = 0; j<m; j++) {
			//cin >> buf;
    		inf >> buf;
			forbiden[j] = toInteger(buf);
    	}
    	
    	
		//cout << "Case #" << i+1 << ": " << solve() << endl;
		outf << "Case #" << i+1 << ": " << solve(friends, forbiden) << endl;
		
		friends.clear();
		forbiden.clear();
	}
    
    inf.close();
    outf.close();
    return 0;
}