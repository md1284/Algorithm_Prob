#include <iostream>
#include <algorithm>
#include <fstream>

using namespace std;

const int INF = 987654321;
int T, K;
int DP[505][505], psum[505];

void prev() {
    for (int i = 0; i <= K; i++) {
        for (int j = 0; j <= K; j++)
            DP[i][j] = INF;
    }
    for (int i = 0; i <= K; i++)
        psum[i] = 0;
}

int solve(int s, int e) {
    if (s == e)
        return 0;
    if (s + 1 == e)
        return DP[s][s] + DP[e][e];

    int& ret = DP[s][e];
    
    if (ret != INF)
        return ret;

    for (int k = s; k < e; k++)
        ret = min(ret, solve(s, k) + solve(k + 1, e) + psum[e] - psum[s-1]);

    return ret;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> T;
    cin >> T;

    for (int i = 0; i < T; i++) {
        //inf >> K;
        cin >> K;

        prev();
        for (int j = 1; j <= K; j++) {
            //inf >> DP[j][j];
            cin >> DP[j][j];
            
            psum[j] = DP[j][j];
            psum[j] += psum[j - 1];
        }
        printf("%d\n", solve(1, K));
    }

    return 0;
}