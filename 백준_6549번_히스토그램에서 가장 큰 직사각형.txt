#include <iostream>
#include <stack>
#include <cmath>
#include <fstream>

using namespace std;

typedef long long LL;

const int S = 1e5, INF = 2123456789;
int N;
int H[S+5], Tree[4*S+5];

void prev() {
	H[0] = INF;
	int h = (int)(ceil(log2(N))+1e-9);
    int tree_size = (1 << (h + 1));
 
 	for(int i = 1; i<=tree_size; i++)
 		Tree[i] = 0;
}

void update(int bucket, int node, int start, int end, int x) {
	if(node < start || end < node)	return;

	if(start == end || x < H[Tree[bucket]])
		Tree[bucket] = node;
	
	if(start != end) {
		update(bucket*2, node, start, (start+end)/2, x);
		update(bucket*2+1, node, (start+end)/2+1, end, x);
	}
}

int get(int bucket, int start, int end, int left, int right) {
	if(right < start || end < left)	return 0;
	
	if(left <= start && end <= right)	return Tree[bucket];
	
	int l = get(bucket*2, start, (start+end)/2, left, right);
	int r = get(bucket*2+1, (start+end)/2+1, end, left, right);
	
	if(H[l] < H[r])
		return l;
	else
		return r;
}

LL solve1(int left, int right) {	// Segment Tree O(NlogN)
	if(right < left)	return -1;
	else if(left == right)	return (LL)H[left];
	
	int hidx = get(1, 1, N, left, right);
	LL ret = (LL)H[hidx]*(right-left+1);
	
	ret = max(ret, solve1(left, hidx-1));
	ret = max(ret, solve1(hidx+1, right));
	
	return ret;
}

LL solve2(int left, int right) {	// Divide and Conquer O(NlogN)
	if(right < left)	return -1;
	if(left == right)	return H[left];
	
	int mid = (left+right)/2;
	LL l = solve2(left, mid);
	LL r = solve2(mid+1, right);
	
	LL ret = H[mid], sum = 0;
	int h = H[mid], s, e;
	s = e = mid;

	while(left <= s && e <= right) {
		if(left == s && e == right)	break;
		
		if(left == s) {
			h = min(h, H[e+1]);
			e++;
		}
		else if(right == e) {
			h = min(h, H[s-1]);
			s--;
		}
		else if(H[s-1] < H[e+1]) {
			h = min(h, H[e+1]);
			e++;
		}
		else if(H[s-1] >= H[e+1]) {
			h = min(h, H[s-1]);
			s--;
		}
		sum = (LL)h*(e-s+1);
		ret = max(ret, sum);
	}
	
	ret = max(ret, l);
	return max(ret, r);
}

LL solve3() {	// Line Sweeping O(N)
	stack<int> st;
	
	LL ret = 0;
	H[0] = H[N+1] = 0;
	
	st.push(0);
	for(int i = 1; i<=N+1; i++) {
		if(H[i] <= H[i-1]) {
			while(!st.empty() && H[i] < H[st.top()]) {
				int h = H[st.top()];
				st.pop();
				if(!st.empty())
					ret = max(ret, (LL)h*(i-st.top()-1));
			}
		}
		st.push(i);
	}
	return ret;
}

int main() {
	//fstream inf("prob.txt");

	while(true) {
		//inf >> N;
		scanf("%d", &N);
		if(N == 0)	break;
		
		for(int i = 1; i<=N; i++) {
			//inf >> H[i];
			scanf("%d", &H[i]);
		}
		printf("%lld\n", solve3());
	}

	return 0;
}