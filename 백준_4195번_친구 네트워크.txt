#include <iostream>
#include <map>
#include <stack>
#include <fstream>

using namespace std;

const int S = 2e5;
int T, F;
int pt[S], d[S+5], spt[S+5];
map<string, int> m;

int findRoot(int a) {
	stack<int> st;
	
	while(a != pt[a]) {
		st.push(a);
		a = pt[a];
	}
	while(!st.empty()) {
		int t = st.top();
		st.pop();
		pt[t] = a;
	}
	return a;
}

void join(int a, int b) {
	a = findRoot(a);
	b = findRoot(b);
	
	if(a == b)
		return;
	
	if(d[a] < d[b]) {
		pt[a] = b;
		spt[b] += spt[a];
	}
	else if(d[b] < d[a]) {
		pt[b] = a;
		spt[a] += spt[b];
	}
	else {
		pt[b] = a;
		d[a]++;
		spt[a] += spt[b];
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	//fstream inf("prob.txt");
	//inf >> T;
	cin >> T;
	
	for(int idx=1, i=0; i<T; i++, idx=1) {
		//inf >> F;
		cin >> F;
		
		m.clear();
		for(int j = 1; j<=2*F; j++) {
			pt[j] = j;
			spt[j] = 1;
		}
		
		string s1, s2;
		for(int j = 0; j<F; j++) {
			//inf >> s1 >> s2;
			cin >> s1 >> s2;
			
			if(m.count(s1) == 0)
				m[s1] = idx++;
			if(m.count(s2) == 0)
				m[s2] = idx++;
			
			join(m[s1], m[s2]);
			printf("%d\n", spt[findRoot(m[s1])]);
		}
	}

	return 0;
}