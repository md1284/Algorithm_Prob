#include <iostream>
#include <cstring>
#include <vector>
#include <queue>

using namespace std;

int n, m, s, e, mcost;
vector<pair<int, int> > adj[10001];
bool visited[10001];

bool bfs(int mc) {
	queue<int> q;
	q.push(s);
	visited[s] = true;
    
	while(!q.empty()) {
		int here = q.front();
		q.pop();
		if(here == e)	return true;
		
		for(int i = 0; i<adj[here].size(); i++) {
			int there = adj[here][i].first;
			
            if(!visited[there] && mc <= adj[here][i].second) {
				visited[there] = true;
				q.push(there);
			}
		}
	}
	return false;
}


int main() {
	cin >> n >> m;
	
	for(int i = 0; i<m; i++) {
		int a, b, c;
		cin >> a >> b >> c;
		
		adj[a].push_back(make_pair(b, c));
		adj[b].push_back(make_pair(a, c));
		mcost = max(mcost, c);
	}
	cin >> s >> e;
	
	int left = 0, right = mcost, mid;
	while(left <= right) {
		memset(visited, false, sizeof(visited));
		mid = (left + right) / 2;
		
		if(bfs(mid))
			left = mid + 1;
		else
			right = mid - 1;
	}
	printf("%d", right);
	
	return 0;
}