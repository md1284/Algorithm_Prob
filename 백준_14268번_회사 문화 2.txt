#include <iostream>
#include <vector>

using namespace std;

typedef long long ll;

const int S = 1e5;
int N, M;
vector<int> adj[S+5];
ll Tree[4*S+5], lazy[4*S+5];
int discovered[S+5], finished[S+5];
int t;

void dfs(int here) {
    t++;
    discovered[here] = t;

    for(int i = 0; i<adj[here].size(); i++) {
        int there = adj[here][i];

        if(discovered[there] == true)
            continue;
        dfs(there);
    }
    finished[here] = t;
}

void lp(int b, int s, int e) {
    if(lazy[b] == 0)
        return;
    
    Tree[b] += ((ll)e-s+1) * lazy[b];
    if(s != e) {
        lazy[b*2] += lazy[b];
        lazy[b*2+1] += lazy[b];
    }
    lazy[b] = 0;
}

void update(int b, int s, int e, int l, int r, ll x) {
    lp(b, s, e);

    if(r < s || e < l)
        return;
    if(l <= s && e <= r) {
        Tree[b] += ((ll)e-s+1) * x;

        if(s != e) {
            lazy[b*2] += x;
            lazy[b*2+1] += x;
        }
        return;
    }

    int mid = (s+e)/2;
    update(b*2, s, mid, l, r, x);
    update(b*2+1, mid+1, e, l, r, x);
    Tree[b] = Tree[b*2] + Tree[b*2+1];
}

ll get(int b, int s, int e, int l, int r) {
    lp(b, s, e);

    if(r < s || e < l)
        return 0;
    if(l <= s && e <= r)
        return Tree[b];
    
    int mid = (s+e)/2;
    return get(b*2, s, mid, l, r) + get(b*2+1, mid+1, e, l, r);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cin >> N >> M;

    for(int i = 1; i<=N; i++) {
        int u;
        cin >> u;
        if(u == -1)
            continue;
        adj[u].push_back(i);
    }
    
    dfs(1);
    for(int i = 1; i<=M; i++) {
        int t, j, w;
        cin >> t;

        if(t == 1) {
            cin >> j >> w;
            update(1, 1, N, discovered[j], finished[j], w);
        }
        else {
            cin >> j;
            cout << get(1, 1, N, discovered[j], discovered[j]) << '\n';
        }
    }

    return 0;
}