#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>

using namespace std;

typedef pair<int, int> pii;

const int S = 1e6, INF = 2e9;
int N;
int b[S + 5], dp[S + 5], p[S + 5];
pii Tree[4 * S + 5];
vector<pii> a;

bool cmp(const pii& a, const pii& b) {
    if (a.first == b.first)
        return a.second > b.second;
    return a.first < b.first;
}

void update(int b, int s, int e, int n, int x) {
    if (n < s || e < n)
        return;

    if (s == e) {
        if (Tree[b].first < x) {
            Tree[b].first = x;
            Tree[b].second = n;
        }
        return;
    }

    int mid = (s + e) / 2;
    update(b * 2, s, mid, n, x);
    update(b * 2 + 1, mid + 1, e, n, x);
    Tree[b] = max(Tree[b * 2], Tree[b * 2 + 1]);
}

pii get(int b, int s, int e, int l, int r) {
    if (r < s || e < l)
        return { -INF, 0 };

    if (l <= s && e <= r)
        return Tree[b];

    int mid = (s + e) / 2;
    return max(get(b * 2, s, mid, l, r), get(b * 2 + 1, mid + 1, e, l, r));
}

void solve() {
    sort(a.begin(), a.end(), cmp);

    for (int i = 0; i < a.size(); i++) {
        int idx = a[i].second;
        if (idx == 1) {
            dp[idx] = 1;
            p[idx] = 0;
        }
        else {
            pii ret = get(1, 1, N, 1, idx - 1);
            dp[idx] = ret.first + 1;

            if (dp[idx] == 1)
                p[idx] = 0;
            else
                p[idx] = ret.second;
        }
        update(1, 1, N, idx, dp[idx]);
    }

    pii ans = { -INF, 0 };
    for (int i = 1; i <= N; i++) {
        if (ans.first < dp[i]) {
            ans.first = dp[i];
            ans.second = i;
        }
    }
    printf("%d\n", ans.first);

    vector<int> ret;
    int c = ans.second;
    while (c != 0) {
        ret.push_back(b[c]);
        c = p[c];
    }
    for (int i = ret.size() - 1; i >= 0; i--)
        printf("%d ", ret[i]);
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N;
    cin >> N;

    for (int x,i = 1; i <= N; i++) {
        //inf >> x;
        cin >> x;

        a.push_back({ x, i });
        b[i] = x;
    }
    solve();

    return 0;
}