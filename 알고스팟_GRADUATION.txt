#include <iostream>
#include <vector>
#include <string.h>

using namespace std;

const int INF = 987654321;
int c, n, k, m, l;
int preCourse[13];	// preCourse[i]: i's preCourse
int Course[11];	// Course[i]: courses in i term
int cache[11][1<<12];

int solve(int term, int cur) {
	if(__builtin_popcount(cur) >= k)	return 0;
	if(term == m)	return INF;
	
	int& ret = cache[term][cur];
	if(ret != -1)	return ret;
	ret = INF;
	
	int canTake = (Course[term] & ~cur);
	
	for(int i = 0; i<n; i++) {
		if((canTake & (1<<i)) && (cur & preCourse[i]) != preCourse[i])
			canTake &= ~(1<<i);
	}
	
	for(int take = canTake; take>0; take = ((take - 1) & canTake)) {
		if(__builtin_popcount(take) > l)	continue;
		ret = min(ret, solve(term+1, cur | take) + 1);
	}
	
	ret = min(ret, solve(term+1, cur));
	
	return ret;
}


int main() {
	cin >> c;
	
	for(int i = 0; i<c; i++) {
		cin >> n >> k >> m >> l;
		memset(cache, -1, sizeof(cache));
		
		for(int j = 0; j<n; j++) {
			int r;
			cin >> r;
			
			for(int k = 0; k<r; k++) {
				int pre;
				cin >> pre;
				
				preCourse[j] = preCourse[j] | (1<<pre);
			}
		}
		
		for(int j = 0; j<m; j++) {
			int r;
			cin >> r;
			
			for(int k = 0; k<r; k++) {
				int cour;
				cin >> cour;
				
				Course[j] = Course[j] | (1<<cour);
			}
		}
		
		int ret = solve(0, 0);
		if(ret == INF)	cout << "IMPOSSIBLE" << endl;
		else 	cout << ret << endl;
		memset(preCourse, 0, sizeof(preCourse));
		memset(Course, 0, sizeof(Course));
	}
	
	
	return 0;
}