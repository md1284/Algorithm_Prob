#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <fstream>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<int, pair<int, int>> pdi;

const int S = 1000;
int N;
int pt[S + 5], d[S + 5];
pii nd[S + 5];
vector<pdi> edge;
vector<int> adj[S + 5];
bool visited[S + 5];

bool cmp(const pdi& a, const pdi& b) {
    return a.first > b.first;
}

int find(int a) {
    if (a == pt[a])
        return a;
    return pt[a] = find(pt[a]);
}

void join(int a, int b) {
    a = find(a);
    b = find(b);

    if (a == b)
        return;

    if (d[a] < d[b])
        pt[a] = b;
    else if (d[a] > d[b])
        pt[b] = a;
    else {
        pt[b] = a;
        d[a]++;
    }
}

int rt(const pii& a, const pii& b) {
    return (a.first + b.first) / abs(a.second - b.second);
}

void dfs(int here) {
    visited[here] = true;

    for (int i = 0; i < adj[here].size(); i++) {
        int there = adj[here][i];

        if (visited[there] == true)
            continue;

        dfs(there);
        printf("%d %d\n", here, there);
    }
}

void solve() {
    for (int i = 1; i <= N; i++) {
        for (int j = i + 1; j <= N; j++)
            edge.push_back({ rt(nd[i], nd[j]), {i, j} });
    }

    sort(edge.begin(), edge.end(), cmp);

    ll ret = 0;
    for (int a,b,c,i = 0; i < edge.size(); i++) {
        c = edge[i].first;
        a = edge[i].second.first;
        b = edge[i].second.second;

        if (find(a) != find(b)) {
            ret += c;
            join(a, b);

            adj[a].push_back(b);
            adj[b].push_back(a);
        }
    }

    printf("%lld\n", ret);
    dfs(1);
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N;
    cin >> N;

    for (int p,c,i = 1; i <= N; i++) {
        //inf >> p >> c;
        cin >> p >> c;

        nd[i] = { c, p };
        pt[i] = i;
    }
    solve();

    return 0;
}