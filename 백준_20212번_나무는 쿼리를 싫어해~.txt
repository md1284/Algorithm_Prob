#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef pair<int,ll> pil;

struct Node {
    int l, r;
    ll v;
    Node() {
        l = -1;
        r = -1;
        v = 0;
    }
};

struct q {
    int i, j, k;
    int idx;
};

const int S = 5e4, MX = 1e9;
int N;
Node Tree[40*4*S+5];
ll lazy[40*4*S+5];
int pv = 2;
vector<q> qry[2];

bool cmp(const q &a, const q &b) {
    return a.k < b.k;
}

void lp(ll b, ll s, ll e) {
    if(b == -1)
        return;
    if(lazy[b] == 0)
        return;

    Tree[b].v += (e-s+1) * lazy[b];
    if(s != e) {
        if(Tree[b].l == -1)
            Tree[b].l = pv++;
        if(Tree[b].r == -1)
            Tree[b].r = pv++;

        lazy[Tree[b].l] += lazy[b];
        lazy[Tree[b].r] += lazy[b];
    }
    lazy[b] = 0;
}

void update(ll b, ll s, ll e, ll l, ll r, ll v) {
    lp(b, s, e);

    if(r < s || e < l)
        return;
    if(l <= s && e <= r) {
        Tree[b].v += (e-s+1) * v;
        if(s != e) {
            if(Tree[b].l == -1)
                Tree[b].l = pv++;
            if(Tree[b].r == -1)
                Tree[b].r = pv++;

            lazy[Tree[b].l] += v;
            lazy[Tree[b].r] += v;
        }
        return;
    }

    ll mid = (s+e)/2;
    if(Tree[b].l == -1)
        Tree[b].l = pv++;
    if(Tree[b].r == -1)
        Tree[b].r = pv++;

    update(Tree[b].l, s, mid, l, r, v);
    update(Tree[b].r, mid+1, e, l, r, v);

    ll t1 = Tree[b].l != -1 ? Tree[Tree[b].l].v : 0;
    ll t2 = Tree[b].r != -1 ? Tree[Tree[b].r].v : 0;
    Tree[b].v = t1 + t2;

}

ll get(ll b, ll s, ll e, ll l, ll r) {
    lp(b, s, e);

    if(b == -1)
        return 0;
    if(r < s || e < l)
        return 0;
    if(l <= s && e <= r)
        return Tree[b].v;
    
    ll mid = (s+e)/2;
    return get(Tree[b].l, s, mid, l, r) + get(Tree[b].r, mid+1, e, l, r);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cin >> N;

    for(int i = 1; i<=N; i++) {
        int t, l, r, k;
        cin >> t >> l >> r >> k;

        if(t == 1)
            qry[0].push_back({l,r,k,0});
        else
            qry[1].push_back({l,r,k,i});
    }

    vector<pil> ret;
    sort(qry[1].begin(), qry[1].end(), cmp);
    int cur = 0;
    for(int i = 0; i<qry[1].size(); i++) {
        int l = qry[1][i].i;
        int r = qry[1][i].j;
        int k = qry[1][i].k;
        int idx = qry[1][i].idx;
        k--;

        while(cur <= k) {
            int l2 = qry[0][cur].i;
            int r2 = qry[0][cur].j;
            int k2 = qry[0][cur].k;

            update(1,1,MX,l2,r2,k2);
            cur++;
        }

        ret.push_back({idx,get(1,1,MX,l,r)});
    }
    sort(ret.begin(), ret.end());
    for(int i = 0; i<ret.size(); i++)
        cout << ret[i].second << '\n';

    return 0;
}