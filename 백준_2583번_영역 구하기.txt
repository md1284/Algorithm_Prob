#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int m, n, k, scnt;
int map[101][101], mov[4][2] = { {0, 1}, {1, 0}, {-1, 0}, {0, -1} };
bool visit[101][101];
vector<int> sc;

void set(int x1, int y1, int x2, int y2) {
	for(int i = y1; i<y2; i++) {
		for(int j = x1; j<x2; j++)
			map[i][j] = 1;
	}
}

void dfs(int y, int x) {
	visit[y][x] = true;
	scnt++;
	
	for(int i = 0; i<4; i++) {
		int dy = y + mov[i][0];
		int dx = x + mov[i][1];
		
		if(dy < 0 || m <= dy || dx < 0 || n <= dx)	continue;
		if(visit[dy][dx] == true || map[dy][dx] == 1)	continue;
		
		dfs(dy, dx);
	}
}

void dfsAll() {
	for(int y = 0; y<m; y++) {
		for(int x = 0; x<n; x++) {
			if(visit[y][x] == true || map[y][x] == 1)	continue;
			
			dfs(y, x);

			sc.push_back(scnt);
			scnt = 0;
		}
	}
}

int main() {
	cin >> m >> n >> k;

	for(int i = 0; i<k; i++) {
		int x1, y1, x2, y2;
		cin >> x1 >> y1 >> x2 >> y2;
		set(x1, y1, x2, y2);
	}

	dfsAll();
	sort(sc.begin(), sc.end());
	cout << sc.size() << endl;
	for(int i = 0; i<sc.size(); i++)
		cout << sc[i] << " ";
	
	return 0;
}