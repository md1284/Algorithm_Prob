#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>

using namespace std;

const int S = 3e4;
int N;
int Tree[4*S+5], cnt[4*S+5];
vector<pair<pair<int,bool>,pair<int,int>>> line;

void update(int b, int s, int e, int l, int r, int x) {
	if(r < s || e < l)	return;
	
	if(l <= s && e <= r)
		Tree[b] += x;
	else {
		int mid = (s+e)/2;
		update(b*2, s, mid, l, r, x);
		update(b*2+1, mid+1, e, l, r, x);
	}
	
	if(Tree[b] > 0)
		cnt[b] = e-s+1;
	else {
		if(s == e)
			cnt[b] = 0;
		else
			cnt[b] = cnt[b*2]+cnt[b*2+1];
	}
}

int solve() {
	int ret = 0;
	sort(line.begin(), line.end());
	
	int prev = line[0].first.first;
	for(int i = 0; i<2*N; i++) {
		int pos = line[i].first.first;
		bool type = line[i].first.second;
		pair<int,int> bd = line[i].second;
		
		ret += cnt[1]*(pos-prev);
		
		int val = (type==false) ? 1:-1;
		update(1, 0, S, bd.first, bd.second, val);
		
		prev = pos;
	}
	return ret;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	//fstream inf("prob.txt");
	//inf >> N;
	cin >> N;
	
	for(int x1,y1,x2,y2,i=0; i<N; i++) {
		//inf >> x1 >> y1 >> x2 >> y2;
		cin >> x1 >> y1 >> x2 >> y2;
		
		line.push_back({{x1,false},{y1,y2-1}});
		line.push_back({{x2,true},{y1,y2-1}});
	}
	
	printf("%d", solve());
	
	return 0;
}