#include <iostream>

using namespace std;

typedef long long ll;

const ll INF = 1e15;
const int S = 1e5;
int N, D;
int a[S+5];
ll dp[S+5], Tree[4*S+5];

void update(int b, int s, int e, int n, ll x) {
    if(n < s || e < n)
        return;
    
    if(s == e) {
        Tree[b] = x;
        return;
    }

    int mid = (s+e)/2;
    update(b*2, s, mid, n, x);
    update(b*2+1, mid+1, e, n, x);
    Tree[b] = max(Tree[b*2], Tree[b*2+1]);
}

ll get(int b, int s, int e, int l, int r) {
    if(r < s || e < l)
        return -INF;
    
    if(l <= s && e <= r)
        return Tree[b];
    
    int mid = (s+e)/2;
    return max(get(b*2, s, mid, l , r), get(b*2+1, mid+1, e, l, r));
}

ll solve() {
    dp[1] = a[1];
    update(1, 1, N, 1, dp[1]);

    for(int i = 2; i<=N; i++) {
        int s = max(i-D, 1);

        ll m = max(get(1, 1, N, s, i-1), (ll)0);
        dp[i] = m + a[i];
        update(1, 1, N, i, dp[i]);
    }

    return get(1, 1, N, 1, N);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cin >> N >> D;

    for(int i = 1; i<=N; i++)
        cin >> a[i];
    cout << solve() << '\n';

    return 0;
}