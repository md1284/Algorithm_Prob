#include <iostream>
#include <vector>

using namespace std;

typedef long long ll;

struct Node {
    int l, r;
    ll v;
    Node() {
        l = -1;
        r = -1;
        v = 0;
    }
};

const int S = 1e5, MX = 1e9;
int N, M;
Node Tree[40*S+5];
int pv = 2, idx[S+5];

void update(int p, int b, ll s, ll e, ll n, int x) {
    if (s == e) {
        Tree[b].v = x;
        return;
    }

    ll mid = (s + e) / 2;
    if (n <= mid) {
        if (Tree[b].l == -1)
            Tree[b].l = pv++;
        Tree[b].r = Tree[p].r;
        update(Tree[p].l, Tree[b].l, s, mid, n, x);
    }
    else {
        if (Tree[b].r == -1)
            Tree[b].r = pv++;
        Tree[b].l = Tree[p].l;
        update(Tree[p].r, Tree[b].r, mid + 1, e, n, x);
    }

    ll lft = Tree[b].l != -1 ? Tree[Tree[b].l].v : 0;
    ll rgt = Tree[b].r != -1 ? Tree[Tree[b].r].v : 0;
    Tree[b].v = lft + rgt;
}

ll get(int p, int b, ll s, ll e, int k) {
    if(s == e)
        return s;
    
    ll d = Tree[Tree[b].l].v - Tree[Tree[p].l].v;
    
    ll mid = (s + e) / 2;
    if(k <= d)
        return get(Tree[p].l, Tree[b].l, s, mid, k);
    return get(Tree[p].r, Tree[b].r, mid+1, e, k-d);
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cin >> N >> M;

    int p = 0, b = 1;
    for(int i = 1; i<=N; i++) {
        ll x;
        cin >> x;
        x += MX;

        idx[i] = b;
        update(p,b,1,2*MX,x,1);
        p = b;
        b = pv++;
    }

    for(int i = 1; i<=M; i++) {
        int l, r, k;
        cin >> l >> r >> k;

        cout << get(idx[l-1], idx[r], 1, 2*MX, k) - MX << '\n';
    }
 
    return 0;
}