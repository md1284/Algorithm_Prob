#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>

using namespace std;

int c, N, W;
int w[101], p[101];
int DP[201][2001];
vector<string> a, ret;

int solve(int index, int weight) {
    if (index == N)
        return 0;

    int& ret = DP[index][weight];
    if (ret != -1)
        return ret;

    ret = solve(index + 1, weight);
    if (weight + w[index] <= W) {
        ret = max(ret, solve(index + 1, weight + w[index]) + p[index]);
        //if (ret < solve(index + 1, weight + w[index]) + p[index]) {
        //    ret = solve(index + 1, weight + w[index]) + p[index];
        //}
    }
    return ret;
}

void reconstruct(int index, int weight) {
    if (index == N)
        return;

    if (solve(index, weight) == solve(index + 1, weight)) {
        reconstruct(index+1, weight);
    }
    else {
        ret.push_back(a[index]);
        reconstruct(index + 1, weight + w[index]);
    }
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> c;
    cin >> c;

    for (int i = 0; i < c; i++) {
        //inf >> N >> W;
        cin >> N >> W;

        for (int j = 0; j <= N; j++) {
            for (int k = 0; k <= W; k++)
                DP[j][k] = -1;
        }
        a.clear();
        ret.clear();

        for (int j = 0; j < N; j++) {
            string s;
            //inf >> s;
            cin >> s;

            a.push_back(s);

            //inf >> w[j] >> p[j];
            cin >> w[j] >> p[j];
        }

        solve(0, 0);
        reconstruct(0, 0);
        cout << solve(0, 0) << " " << ret.size() << endl;
        for (int j = 0; j < ret.size(); j++)
            cout << ret[j] << endl;
    }

    return 0;
}