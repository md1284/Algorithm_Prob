#include <iostream>
#include <vector>
#include <limits>

using namespace std;

const int INF = numeric_limits<int>::max();

// Range Minimum Query
struct RMQ {
	int n;
	vector<int> rangeMin;
	
	RMQ(const vector<int>& array) {
		n = array.size();
		rangeMin.resize(4 * n);
		init(array, 0, n-1, 1);
	}
	
	int init(const vector<int>& array, int left, int right, int node) {
		if(left == right)	return rangeMin[node] = array[left];
		int mid = (left + right) / 2;
		int leftMin = init(array, left, mid, node*2);
		int rightMin = init(array, mid+1, right, node*2+1);
		return rangeMin[node] = min(leftMin, rightMin);
	}
	
	int query(int left, int right, int node, int nodeLeft, int nodeRight) {
		if(right < nodeLeft || nodeRight < left)	return INF;
		if(left <= nodeLeft && nodeRight <= right)	return rangeMin[node];
		
		int mid = (nodeLeft + nodeRight) / 2;
		return min(query(left, right, node*2, nodeLeft, mid), query(left, right, node*2+1, mid+1, nodeRight));
	}
	
	int query(int left, int right) {
		return query(left, right, 1, 0, n-1);
	}
	
	int update(int index, int newValue, int node, int nodeLeft, int nodeRight) {
		if(index < nodeLeft || nodeRight < index)	return rangeMin[node];
		
		if(nodeLeft == nodeRight)	return rangeMin[node] = newValue;
		int mid = (nodeLeft + nodeRight) / 2;
		return rangeMin[node] = min(update(index, newValue, node*2, nodeLeft, mid), update(index, newValue, node*2+1, mid+1, nodeRight));
	}
	
	int update(int index, int newValue) {
		return update(index, newValue, 1, 0, n-1);
	}
};

int main() {
	vector<int> array;
	array.push_back(10);
	array.push_back(25);
	array.push_back(13);
	array.push_back(40);
	
	RMQ rm(array);
	int a = rm.update(0, 1);
	cout << rm.query(0, 4) << endl;
	
	return 0;
}