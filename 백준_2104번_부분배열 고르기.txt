#include <iostream>
#include <algorithm>
#include <fstream>

using namespace std;

typedef long long ll;
typedef pair<ll, ll> pll;

const ll INF = 1e12;
const int S = 1e5;
int N;
int a[S + 5];
ll psum[S + 5];
pll Tree[4 * S + 5];

void init(int b, int s, int e) {
    if (s == e) {
        Tree[b] = { (ll)a[s], s };
        return;
    }

    int mid = (s + e) / 2;
    init(b * 2, s, mid);
    init(b * 2 + 1, mid + 1, e);
    Tree[b] = min(Tree[b * 2], Tree[b * 2 + 1]);
}

pll get(int b, int s, int e, int l, int r) {
    if (r < s || e < l)
        return { INF, 0 };

    if (l <= s && e <= r)
        return Tree[b];

    int mid = (s + e) / 2;
    return min(get(b * 2, s, mid, l, r), get(b * 2 + 1, mid + 1, e, l, r));
}

ll query(int l, int r) {
    if (r < l)
        return 0;
    if (l == r)
        return (ll)a[l] * a[l];

    pll mid = get(1, 1, N, l, r);

    ll ret = (psum[r] - psum[l - 1]) * mid.first;
    ret = max(ret, query(l, mid.second - 1));
    ret = max(ret, query(mid.second + 1, r));

    return ret;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N;
    cin >> N;

    for (int i = 1; i <= N;i++) {
        //inf >> a[i];
        cin >> a[i];
        psum[i] = psum[i - 1] + a[i];
    }
    init(1, 1, N);
    printf("%lld", query(1, N));

    return 0;
}