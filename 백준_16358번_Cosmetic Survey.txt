#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int S = 500, INF = 1e9;
int M, N;
int p[S+5][S+5], d[S+5][S+5], s[S+5][S+5];

void solve() {
    for(int i = 1; i<=N; i++) {
        for(int j = 1; j<=M; j++) {
            for(int k = 1; k<=M; k++) {
                if(p[i][j] < p[i][k])
                    d[j][k]++;
            }
        }
    }

    for(int i = 1; i<=M; i++) {
        for(int j = 1; j<=M; j++) {
            if(d[i][j] > d[j][i])
                s[i][j] = d[i][j];
        }
    }

    for(int k = 1; k<=M; k++) {
        for(int i = 1; i<=M; i++) {
            for(int j = 1; j<=M; j++)
                s[i][j] = max(s[i][j], min(s[i][k], s[k][j]));
        }
    }

    vector<int> ret;
    for(int i = 1; i<=M; i++) {
        bool check = true;

        for(int j = 1; j<=M; j++) {
            if(s[i][j] < s[j][i]) {
                check = false;
                break;
            }
        }
        if(check == true)
            ret.push_back(i);
    }
    sort(ret.begin(), ret.end());
    for(int i = 0; i<ret.size(); i++)
        cout << ret[i] << " ";
    cout << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cin >> M >> N;

    for(int i = 1; i<=N; i++) {
        for(int j = 1; j<=M; j++) {
            cin >> p[i][j];
            if(p[i][j] == 0)
                p[i][j] = INF;
        }
    }
    solve();

    return 0;
}