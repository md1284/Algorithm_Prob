#include <iostream>
#include <queue>

using namespace std;

struct P {
	int x, y, w, s;
};

const int INF = 987654321;
int n, m, k;
int dist[1001][1001][11][2];
char a[1001][1001];
int mov[5][2] = {{0, 0}, {0, 1}, {1, 0}, {-1, 0}, {0, -1}};

int bfs() {
	queue<P> q;
	q.push({0, 0, 0});
	dist[0][0][0][0] = 1;
	
	while(!q.empty()) {
		int x = q.front().x;
		int y = q.front().y;
		int w = q.front().w;
		int s = q.front().s;
		q.pop();
		
		if(x == m-1 && y == n-1)	return dist[y][x][w][s];

		for(int type = 0; type < 5; type++) {
			int dx = x + mov[type][0];
			int dy = y + mov[type][1];
		
			int ds = (s == 0 ? 1 : 0);
				
			if(dx < 0 || m <= dx || dy < 0 || n <= dy)	continue;
			if(dist[dy][dx][w][ds] != 0)	continue;
			if(s == 0 && a[dy][dx] == '1' && w < k && dist[dy][dx][w+1][ds] != 0)	continue;
		
			if(type == 0) {
				dist[dy][dx][w][ds] = dist[dy][dx][w][s] + 1;
				q.push({dx, dy, w, ds});	
			}
			else if(a[dy][dx] == '0') {
				dist[dy][dx][w][ds] = dist[y][x][w][s] + 1;
				q.push({dx, dy, w, ds});
			}
			else if(s == 0 && a[dy][dx] == '1' && dist[dy][dx][w+1][ds] == 0 && w < k) {
				dist[dy][dx][w + 1][ds] = dist[y][x][w][s] + 1;
				q.push({dx, dy, w + 1, ds});
			}
		}
	}
	
	int ret = INF;
	for(int i = 0; i<=k; i++) {
		for(int j = 0; j<2; j++) {
			if(dist[n-1][m-1][i][j] == 0)	continue;
			
			ret = min(ret, dist[n-1][m-1][i][j]);
		}
	}
		
	if(ret == INF)
		return -1;
	return ret;
}

int main() {
	cin >> n >> m >> k;
	
	for(int i = 0; i<n; i++)
		cin >> a[i];
		
	printf("%d", bfs());
		
	return 0;
}