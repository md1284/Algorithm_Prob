#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>

using namespace std;

const int S = 1e5;
int V, E, time, cnt;
int discovered[S+5];
vector<int> adj[S+5];
vector<pair<int, int> > CE;

int dfs(int here, int parent) {
	int ret = discovered[here] = ++time;

	for(int i = 0; i<adj[here].size(); i++) {
		int there = adj[here][i];
		
		if(there == parent)
			continue;
	
		if(discovered[there] == 0) {
			int subTree = dfs(there, here);
			
			if(subTree > discovered[here])
				CE.push_back(make_pair(min(here, there), max(here, there)));
			
			ret = min(ret, subTree);
		}
		else
			ret = min(ret, discovered[there]);
	}
	
	return ret;
}

void dfsAll() {
	for(int i = 1; i<=V; i++) {
		if(discovered[i] == 0)
			dfs(i, 0);
	}
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	//fstream inf("prob.txt");
	//inf >> V >> E;
	cin >> V >> E;
	
	for(int a, b, i = 1; i<=E; i++) {
		//inf >> a >> b;
		cin >> a >> b;
		adj[a].push_back(b);
		adj[b].push_back(a);
	}
	
	dfsAll();
	sort(CE.begin(), CE.end());
	
	printf("%d\n", CE.size());
	for(int i = 0; i<CE.size(); i++)
		printf("%d %d\n", CE[i].first, CE[i].second);
	
	return 0;
}