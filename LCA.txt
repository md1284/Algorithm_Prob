#include <iostream>
#include <vector>

using namespace std;

typedef long long ll;

const int S = 1e5;
int N, M;
vector<int> adj[S+5];
int d[S+5], anc[S+5][18];
bool visited[S+5];

void dfs(int here, int dth) {
    visited[here] = true;
    d[here] = dth;

    for(int i = 0; i<adj[here].size(); i++) {
        int there = adj[here][i];

        if(visited[there] == true)
            continue;
        dfs(there, dth+1);
        anc[there][0] = here;
    }
}

void init() {
    for(int j = 1; j<18; j++) {
        for(int i = 1; i<=N; i++)
            anc[i][j] = anc[anc[i][j-1]][j-1];
    }
}

int lca(int u, int v) {
    if(d[v] < d[u])
        swap(u,v);
    
    for(int i = 17; i>=0; i--) {
        if(d[u] <= d[anc[v][i]])
            v = anc[v][i];
    }

    if(u == v)
        return u;
    
    for(int i = 17; i>=0; i--) {
        if(anc[u][i] != anc[v][i]) {
            u = anc[u][i];
            v = anc[v][i];
        }
    }
    return anc[u][0];
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cin >> N;

    for(int i = 1; i<=N-1; i++) {
        int u, v;
        cin >> u >> v;

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    dfs(1,1);
    init();

    cin >> M;
    for(int i = 1; i<=M; i++) {
        int u, v;
        cin >> u >> v;

        cout << lca(u,v) << '\n';
    }
 
    return 0;
}