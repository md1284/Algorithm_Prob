#include <iostream>
#include <vector>
#include <cstring>
#include <fstream>

using namespace std;

int T, N;

int toNumber(const char ch) {
    return ch - '0';
}

struct TrieNode {
    TrieNode* children[26];
    bool terminal;

    TrieNode() : terminal(false) {
        memset(children, 0, sizeof(children));
    }
    ~TrieNode() {
        for (int i = 0; i < 26; i++) {
            if (children[i])
                delete children[i];
        }
    }

    void insert(const char* key) {
        if (*key == 0)
            terminal = true;
        else {
            int next = toNumber(*key);
            if (children[next] == NULL)
                children[next] = new TrieNode();
            children[next]->insert(key + 1);
        }
    }

    TrieNode* find(const char* key) {
        if (*key == 0)
            return this;
        int next = toNumber(*key);
        if (children[next] == NULL)
            return NULL;
        return children[next]->find(key + 1);
    }
};

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> T;
    cin >> T;

    for (int i = 0; i < T; i++) {
        //inf >> N;
        cin >> N;

        TrieNode* trie = new TrieNode();
        vector<string> str;
        string s;
        for (int j = 0; j < N; j++) {
            //inf >> s;
            cin >> s;

            str.push_back(s);
            trie->insert(&s[0]);
        }

        bool check = false;
        for (int j = 0; j < N; j++) {
            TrieNode* p = trie->find(&str[j][0]);

            for (int k = 0; k < 26; k++) {
                if (p->children[k] != NULL) {
                    check = true;
                    break;
                }
            }
            if (check == true)
                break;
        }
        if (check == true)
            printf("NO\n");
        else
            printf("YES\n");
    }
    
    return 0;
}