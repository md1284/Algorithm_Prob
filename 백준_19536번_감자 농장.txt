#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>

using namespace std;

typedef long long ll;

const int S = 1e6;
int N, Q;
int psum[S + 5];
ll dpsum[S + 5];
vector<int> a, r;

ll calc(int x, int cnt) {
	int xidx = lower_bound(a.begin(), a.end(), x) - a.begin();
	return dpsum[xidx + cnt - 1] - dpsum[xidx - 1] * 2 + dpsum[xidx - cnt - 1];
}

pair<int, ll> case1(int x) {
	int left = psum[x - 1], right = psum[N] - psum[x];
	int cnt = min(left, right);

	int p = cnt * 2;
	ll t = calc(x, cnt) * 2;

	if (left < right) {
		p++;
		int xidx = lower_bound(a.begin(), a.end(), x) - a.begin();
		t += (ll)a[xidx + left] * 2 - x;
	}
	else
		t += (ll)N - x + 1;

	return { p, t };
}

pair<int, ll> case2(int r, int x) {
	int left = psum[x - 1] - psum[r], right = psum[N] - psum[x];
	int cnt = min(left, right);

	int p = cnt * 2;
	ll t = calc(x, cnt) * 2;

	if (left < right) {
		p += right - left;
		int xidx = lower_bound(a.begin(), a.end(), x) - a.begin();
		int rem = right - left;
		t += ((ll)N - r + 1) + (dpsum[a.size() - 1] - dpsum[xidx + left - 1]) * 2 - (ll)r * rem - (ll)x * rem + ((ll)x - r) * (rem - 1);
	}
	else
		t += (ll)N - x + 1;

	return { p , t };
}

pair<int, ll> case3(int r, int x) {
	int left = psum[x - 1], right = psum[r - 1] - psum[x];
	int cnt = min(left, right);

	int p = cnt * 2;
	ll t = calc(x, cnt) * 2;
	if (left > right) {
		p += left - right;
		int xidx = lower_bound(a.begin(), a.end(), x) - a.begin();
		int rem = left - right;
		t += (ll)r + r - x + ((ll)r * rem - dpsum[xidx - 1 - right]) * 2;
	}
	else if(left == right)
		t += (ll)r * 2 - x;
	else {
		p++;
		int xidx = lower_bound(a.begin(), a.end(), x) - a.begin();
		t += (ll)a[xidx + left] + a[xidx + left] - x;
	}

	return { p , t };
}

pair<int, ll> case4(int l, int r) {
	int p = psum[r - 1] - psum[l];
	ll t = -1;
	return { p,t };
}

pair<int, ll> solve(int x) {
	vector<int>::iterator it = lower_bound(r.begin(), r.end(), x);
	
	pair<int, ll> ret;
	if (it == r.end() && r.size() == 0)
		ret = case1(x);
	else if (it == r.end() && r.size() > 0) {
		it--;
		ret = case2(*it, x);
	}
	else if (it == r.begin())
		ret = case3(*it, x);
	else {
		int l, r = (*it);
		it--;
		l = (*it);
		ret = case4(l, r);
	}
	return ret;
}

int main(void) {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	//fstream inf("prob.txt");
	//inf >> N >> Q;
	cin >> N >> Q;

	string s;
	//inf >> s;
	cin >> s;
	
	a.push_back(0);
	for (int p = 0, i = 1; i <= N; i++) {
		if (s[i - 1] == 'P') {
			a.push_back(i);
			p = 1;
		}
		else if (s[i - 1] == 'R')
			r.push_back(i);

		psum[i] = psum[i - 1] + p;
		p = 0;
	}
	for (int i = 1; i < a.size(); i++)
		dpsum[i] = dpsum[i - 1] + a[i];

	pair<int, ll> ret;
	for (int x, i = 0; i < Q; i++) {
		//inf >> x;
		cin >> x;

		ret = solve(x);
		printf("%d %lld\n", ret.first, ret.second);
	}

	return 0;
}