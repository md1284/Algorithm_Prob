#include <iostream>
#include <fstream>

using namespace std;

typedef long long ll;

////////// pointer based tree //////////
struct Node {
    Node* l, *r;
    ll v;
    Node() {
        l = r = NULL;
        v = 0;
    }
} * root;

int N, M, K;

void update(Node* b, int s, int e, int n, int x) {
    if (s == e) {
        b->v = x;
        return;
    }

    int mid = (s + e) / 2;
    if (n <= mid) {
        if (b->l == NULL)
            b->l = new Node();
        update(b->l, s, mid, n, x);
    }
    else {
        if (b->r == NULL)
            b->r = new Node();
        update(b->r, mid + 1, e, n, x);
    }

    ll lft = b->l != NULL ? b->l->v : 0;
    ll rgt = b->r != NULL ? b->r->v : 0;
    b->v = lft + rgt;
}

ll get(Node* b, int s, int e, int l, int r) {
    if (b == NULL)
        return 0;

    if (r < s || e < l)
        return 0;

    if (l <= s && e <= r)
        return b->v;

    int mid = (s + e) / 2;
    return get(b->l, s, mid, l, r) + get(b->r, mid + 1, e, l, r);
}


////////// indexe based tree //////////
struct Node {
    ll l, r;
    ll v;
    Node() {
        l = r = -1;
        v = 0;
    }
};

const int S = 3e6;
int N, M, K;
Node Tree[S + 5];
int pv = 1;

void update(int b, int s, int e, int n, int x) {
    if (s == e) {
        Tree[b].v = x;
        return;
    }

    int mid = (s + e) / 2;
    if (n <= mid) {
        if (Tree[b].l == -1)
            Tree[b].l = pv++;
        update(Tree[b].l, s, mid, n, x);
    }
    else {
        if (Tree[b].r == -1)
            Tree[b].r = pv++;
        update(Tree[b].r, mid + 1, e, n, x);
    }

    ll lft = Tree[b].l != -1 ? Tree[Tree[b].l].v : 0;
    ll rgt = Tree[b].r != -1 ? Tree[Tree[b].r].v : 0;
    Tree[b].v = lft + rgt;
}

ll get(int b, int s, int e, int l, int r) {
    if (b == -1)
        return 0;
    if (r < s || e < l)
        return 0;
    if (l <= s && e <= r)
        return Tree[b].v;

    int mid = (s + e) / 2;
    return get(Tree[b].l, s, mid, l, r) + get(Tree[b].r, mid + 1, e, l, r);
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N >> M >> K;
    cin >> N >> M >> K;
    
    ll x;
    for (int i = 1; i <= N; i++) {
        //inf >> x;
        cin >> x;
        
        update(0, 1, N, i, x);
    }
    ll a, b, c;
    for (int i = 0; i < M + K; i++) {
        //inf >> a >> b >> c;
        cin >> a >> b >> c;
        
        if (a == 1)
            update(0, 1, N, b, c);
        else
            printf("%lld\n", get(0, 1, N, b, c));
    }

    return 0;
}