#include <iostream>
#include <cstring>

using namespace std;

int n;
char bd[101][101];
bool visited[101][101];
int mov[4][2] = {
{1, 0}, {0, 1}, {-1, 0}, {0, -1}
};

void dfs(int y, int x, char ch) {
	visited[y][x] = true;
	
	for(int type = 0; type < 4; type++) {
		int dy = y + mov[type][0];
		int dx = x + mov[type][1];
		
		if(dy < 0 || n <= dy || dx < 0 || n <= dx)	continue;
		if(visited[dy][dx] == true)	continue;
		if(bd[dy][dx] != ch)	continue;
		
		dfs(dy, dx, ch);
	}
}

int dfsAll() {
	int cnt = 0;
	
	for(int i = 0; i<n; i++) {
		for(int j = 0; j<n; j++) {
			if(visited[i][j] == true)	continue;
			
			cnt++;
			dfs(i, j, bd[i][j]);
		}
	}
	return cnt;
}

void solve() {
	cout << dfsAll() << " ";
	
	memset(visited, false, sizeof(visited));
	for(int i = 0; i<n; i++)
		for(int j = 0; j<n; j++) {
			if(bd[i][j] == 'G')
				bd[i][j] = 'R';
		}
	cout << dfsAll();
}

int main() {
	cin >> n;
	
	for(int i = 0; i<n; i++)
		for(int j = 0; j<n; j++)
			cin >> bd[i][j];	
	
	solve();
		
	return 0;
}