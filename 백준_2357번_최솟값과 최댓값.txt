#include <iostream>
#include <vector>
#include <limits>
#include <fstream>

using namespace std;

const int S = 1e5+5, INF = 2123456789;
int N, M;
pair<int, int> Tree[4*S+5];

void prev() {
	for(int i = 1; i<=4*S; i++) {
		Tree[i].first = INF;
		Tree[i].second = -1;
	}
}

void update(int bucket, int node, int start, int end, int x) {
	if(node < start || end < node)	return;
	
	Tree[bucket].first = min(Tree[bucket].first, x);
	Tree[bucket].second = max(Tree[bucket].second, x);
	
	if(start != end) {
		update(bucket*2, node, start, (start+end)/2, x);
		update(bucket*2+1, node, (start+end)/2+1, end, x);
	}
}

pair<int, int> get(int bucket, int start, int end, int left, int right) {
	if(right < start || end < left)
		return make_pair(INF, -1);
	
	if(left <= start && end <= right)
		return Tree[bucket];

	pair<int, int> l = get(bucket*2, start, (start+end)/2, left, right);
	pair<int, int> r = get(bucket*2+1, (start+end)/2+1, end, left, right);	
	
	return make_pair(min(l.first, r.first), max(l.second, r.second));
}

int main() {
	//fstream inf("prob.txt");
	//inf >> N >> M;
	scanf("%d %d", &N, &M);
	
	prev();
	pair<int, int> ret;
	for(int i = 1; i<=N; i++) {
		int x;
		//inf >> x;
		scanf("%d", &x);
		update(1, i, 1, N, x);
	}
	
	for(int i = 1; i<=M; i++) {
		int a, b;
		//inf >> a >> b;
		scanf("%d %d", &a, &b);
		ret = get(1, 1, N, a, b);
		printf("%d %d\n", ret.first, ret.second);
	}
	
	return 0;
}