#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <string.h>

using namespace std;

int n, m, v;
vector<int> G[1001];
bool visit[1001];

void dfs(int start) {
	visit[start] = true;
	cout << start << " ";
	
	for(int i = 0; i<G[start].size(); i++) {
		if(visit[G[start][i]])	continue;
		
		dfs(G[start][i]);
	}
}

void bfs(int start) {
	queue<int> q;
	q.push(start);
	
	while(!q.empty()) {
		int here = q.front();
		q.pop();
		
		if(visit[here])	continue;
		
		visit[here] = true;
		cout << here << " ";
		
		for(int i = 0; i<G[here].size(); i++) {
			if(visit[G[here][i]])	continue;

			q.push(G[here][i]);
		}
	}
}


int main() {
	cin >> n >> m >> v;
	
	for(int i = 0; i<m; i++) {
		int a, b;
		cin >> a >> b;
		G[a].push_back(b);
		G[b].push_back(a);
	}
	for(int i = 1; i<=n; i++)
		sort(G[i].begin(), G[i].end());
	
	dfs(v);
	memset(visit, false, sizeof(visit));
	printf("\n");
	bfs(v);
	
	return 0;
}