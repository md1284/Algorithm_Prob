#include <iostream>
#include <queue>
#include <cstring>
#include <cmath>

using namespace std;

typedef long long ll;
typedef pair<int,int> pii;

const int S = 1000;
int N;
ll a[S+5][S+5];
int mv[4][2] = {{1,0}, {-1,0}, {0,1}, {0,-1}};
bool visited[S+5][S+5];

bool check(ll k) {
    memset(visited, 0, sizeof(visited));
    queue<pii> q;
    q.push({1,1});

    while(!q.empty()) {
        int y = q.front().first;
        int x = q.front().second;
        q.pop();

        if(visited[y][x] == true)
            continue;
        visited[y][x] = true;
        
        for(int type = 0; type<4; type++) {
            int ny = y + mv[type][0];
            int nx = x + mv[type][1];

            if(ny > N || ny < 1 || nx > N || nx < 1)
                continue;
            if(abs(a[ny][nx] - a[y][x]) > k)
                continue;
            q.push({ny,nx});
        }
    }
    if(visited[N][N] == true)
        return true;
    return false;
}

ll solve() {
    int lo = 0, hi = 1e9, mid;
    while(lo <= hi) {
        mid = (lo+hi)/2;

        if(check(mid) == true)
            hi = mid-1;
        else
            lo = mid+1;
    }

    return lo;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cin >> N;

    for(int i = 1; i<=N; i++) {
        for(int j = 1; j<=N; j++)
            cin >> a[i][j];
    }
    cout << solve() << '\n';

    return 0;
}