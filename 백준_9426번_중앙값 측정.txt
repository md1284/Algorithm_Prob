#include <iostream>
#include <fstream>

using namespace std;

typedef long long ll;
typedef pair<int, int> pii;

const int S = 250000, MX = 65535;
int N, K;
int a[S + 5];
ll Tree[4 * MX + 5];

void update(int b, int s, int e, int n, int x) {
    if (n < s || e < n)
        return;

    if (s == e) {
        Tree[b] += x;
        return;
    }

    int mid = (s + e) / 2;
    update(b * 2, s, mid, n, x);
    update(b * 2 + 1, mid + 1, e, n, x);
    Tree[b] = Tree[b * 2] + Tree[b * 2 + 1];
}

ll get(int b, int s, int e, int l, int r) {
    if (r < s || e < l)
        return 0;

    if (l <= s && e <= r)
        return Tree[b];

    int mid = (s + e) / 2;
    return get(b * 2, s, mid, l, r) + get(b * 2 + 1, mid + 1, e, l, r);
}

int solve() {
    int lo = 0, hi = MX, mid;

    while (lo <= hi) {
        mid = (lo + hi) / 2;

        if (get(1, 1, MX, 1, mid) < (K + 1) / 2)
            lo = mid + 1;
        else
            hi = mid - 1;
    }
    return lo;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N >> K;
    cin >> N >> K;

    for (int i = 1; i <= N; i++) {
        //inf >> a[i];
        cin >> a[i];

        a[i]++;
        if(i < K)
            update(1, 1, MX, a[i], 1);
    }

    ll ret = 0;
    for (int i = K; i <= N; i++) {
        update(1, 1, MX, a[i], 1);
        ret += solve() - 1;
        update(1, 1, MX, a[i - K + 1], -1);
    }
    printf("%lld", ret);

    return 0;
}