#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Suffix Array

struct Comparator {
	vector<int>& group;
	int t;
	Comparator(vector<int>& _group, int _t): group(_group), t(_t) {
		group = _group; t = _t;
	}
	bool operator () (int a, int b) {
		if(group[a] != group[b])	return group[a] < group[b];
		return group[a + t] < group[b + t];
	}
};

vector<int> SuffixArray(const string& S) {
	int n = S.size();
	vector<int> group(n+1);
	vector<int> perm(n);
	for(int i = 0; i<n; i++)	perm[i] = i;
	for(int i = 0; i<n; i++)	group[i] = S[i];
	group[n] = -1;
	
	int t = 1;
	while(t <= n) {
		Comparator compareUsing2T(group, t);
		sort(perm.begin(), perm.end(), compareUsing2T);
		
		t *= 2;
		if(t >= n)	break;
		
		vector<int> newGroup(n+1);
		newGroup[n] = -1;
		newGroup[perm[0]] = 0;
		
		for(int i = 1; i<n; i++) {
			if(compareUsing2T(perm[i-1], perm[i]))
				newGroup[perm[i]] = newGroup[perm[i-1]] + 1;
			else
				newGroup[perm[i]] = newGroup[perm[i-1]];
		}
		group = newGroup;
	}
	return perm;
}

int main() {
	string str = "alohomora";
	vector<int> ret = SuffixArray(str);
	
	for(int i = 0; i<ret.size(); i++)
		cout << ret[i] << endl;
		
	return 0;
}