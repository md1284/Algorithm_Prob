#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int n, k, m;
vector<vector<int> > p;

bool cmp(const vector<int>& v1, const vector<int>& v2) {
	return v1.size() < v2.size();
}

vector<int> getPartialMatch(const vector<int>& N) {
	int n = N.size();
	int begin = 1, matched = 0;
	vector<int> pi(n, 0);
	
	while(begin + matched < n) {
		if(N[begin + matched] == N[matched]) {
			matched++;
			pi[begin + matched - 1] = matched;
		}
		else {
			if(matched == 0)
				begin++;
			else {
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	return pi;
}

bool KMPSearch(const vector<int>& H, const vector<int>& N) {
	int n = H.size(), m = N.size();
	int begin = 0, matched = 0;
	vector<int> pi = getPartialMatch(N);
	
	while(begin <= n-m) {
		if(matched < m && H[begin + matched] == N[matched]) {
			matched++;
			if(matched == m)	return true;
		}
		else {
			if(matched == 0)
				begin++;
			
			else {
				begin += matched - pi[matched - 1];
				matched = pi[matched - 1];
			}
		}
	}
	return false;
}

string solve() {
	bool check = true;
	vector<int> vir(k), rvir(k);
	for(int i = 0; i<=p[0].size()-k; i++) {
		for(int j = 0; j<k; j++) {
			vir[j] = p[0][i+j];
			rvir[j] = p[0][i+k-j-1];
		}
		
		int cnt = 0;
		for(int j = 1; j<n; j++) {
			if(KMPSearch(p[j], vir) == true || KMPSearch(p[j], rvir) == true) {
				cnt++;
			}
			else
				break;
		}
		if(cnt == n-1)
			return "YES";
	}
	return "NO";
}

int main() {
	cin >> n >> k;
	
	for(int i = 0; i<n; i++) {
		cin >> m;
		
		vector<int> bp(m);
		for(int j = 0; j<m; j++)
			cin >> bp[j];
		
		p.push_back(bp);
	}
	
	sort(p.begin(), p.end(), cmp);
	cout << solve() << endl;
	
	return 0;
}