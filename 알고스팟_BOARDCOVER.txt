#include <iostream>
#include <vector>

using namespace std;

const int block[4][3][2] = {
	{ {0, 0}, {-1, -1}, {-1, 0} },
	{ {0, 0}, {-1, 0}, {-1, 1} },
	{ {0, 0}, {-1, 0}, {0, 1} },
	{ {0, 0}, {0, 1}, {-1, 1} }
};

vector<int> board[21];
int t, h, w;

bool set(int y, int x, int type, int del) {
	for(int i = 0; i<3; i++) {
		const int ny = y + block[type][i][0];
		const int nx = x + block[type][i][1];
		
		if(ny < 0 || ny > h-1 || nx < 0 || nx > w-1)	return false;
		else if(board[ny][nx] + del > 1)	return false;
	}
	return true;
}

int solve(int y, int x) {
	if(y == h-1 && x == w-1 && board[y][x] == 1)	return 1;
	
	int ret = 0;
	for(int i = 0; i < h; i++) {
		for(int j = 0; j < w; j++) {
			if(board[i][j] == 0) {
				for(int type = 0; type < 4; type++) {
					if(set(i, j, type, 1))
						ret += solve(i, j);
					set(i, j, type, -1);
				}
			}
		}
	}
	return ret;
}


int main(void) {
	scanf("%d", &t);
	
	for(int i = 0; i<t; i++) {
		scanf("%d %d", &h, &w);
		for(int j = 0; j<h; j++) {
			getchar();
			for(int k = 0; k<w; k++) {
				char c;
				scanf("%c", &c);
				if(c == '#')	board[j].push_back(1);
				else if(c == '.')	board[j].push_back(0);
			}
		}
		
		printf("sol : %d\n", solve(0, 0));
	}
	
	return 0;
}