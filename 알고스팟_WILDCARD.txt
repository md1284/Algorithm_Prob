#include <iostream>
#include <vector>
#include <cstring>
#include <algorithm>
#include <fstream>

using namespace std;

int c, N;
string w;
vector<string> dict;
int DP[101][101];

bool check(const string& s, int si, int wi) {
    int& ret = DP[si][wi];

    if (ret != -1)
        return ret;

    while (wi < w.size() && si < s.size() && (w[wi] == '?' || s[si] == w[wi])) {
        si++;
        wi++;
    }
    if (wi == w.size() && si == s.size())
        return ret = true;
    else if (wi == w.size())
        return ret = false;

    if (w[wi] == '*') {
        if (wi + 1 == w.size())
            return ret = true;

        for (int i = si; i < s.size(); i++) {
            if (check(s, i, wi + 1) == true)
                return ret = true;
        }
    }
    return ret = false;
}

void solve() {
    vector<string> ret;

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < 101; j++) {
            for (int k = 0; k < 101; k++)
                DP[j][k] = -1;
        }

        if (check(dict[i], 0, 0) == true)
            ret.push_back(dict[i]);
    }
    sort(ret.begin(), ret.end());
    for (int i = 0; i < ret.size(); i++)
        cout << ret[i] << endl;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> c;
    cin >> c;

    for (int i = 0; i < c; i++) {
        //inf >> w;
        cin >> w;

        //inf >> N;
        cin >> N;

        dict.clear();
        for (int j = 0; j < N; j++) {
            string s;
            //inf >> s;
            cin >> s;

            dict.push_back(s);
        }
        solve();
    }

    return 0;
}