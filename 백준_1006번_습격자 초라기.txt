#include <iostream>
#include <algorithm>
#include <cmath>
#include <fstream>

using namespace std;

const int S = 1e4, INF = 1e9;
int T, N, W;
int a[2][S+5], dp[S+5][S+5];

void update(int i, int j) {
    if (i == j) {
        dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + 1);
        dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + 1);

        if (a[0][i + 1] + a[0][i + 2] <= W)
            dp[i + 2][j] = min(dp[i + 2][j], dp[i][j] + 1);
        if (a[1][j + 1] + a[1][j + 2] <= W)
            dp[i][j + 2] = min(dp[i][j + 2], dp[i][j] + 1);

        if (a[0][i + 1] + a[1][j + 1] <= W)
            dp[i + 1][j + 1] = min(dp[i + 1][j + 1], dp[i][j] + 1);
    }
    else if (abs(i - j) == 2) {
        if (i < j) {
            dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + 1);
            if (a[0][i + 1] + a[0][i + 2] <= W)
                dp[i + 2][j] = min(dp[i + 2][j], dp[i][j] + 1);
        }
        else {
            dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + 1);
            if (a[1][j + 1] + a[1][j + 2] <= W)
                dp[i][j + 2] = min(dp[i][j + 2], dp[i][j] + 1);
        }
    }
    else {
        if (i < j) {
            dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + 1);
            dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + 1);

            if (a[0][i + 1] + a[0][i + 2] <= W)
                dp[i + 2][j] = min(dp[i + 2][j], dp[i][j] + 1);
        }
        else {
            dp[i + 1][j] = min(dp[i + 1][j], dp[i][j] + 1);
            dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + 1);

            if (a[1][j + 1] + a[1][j + 2] <= W)
                dp[i][j + 2] = min(dp[i][j + 2], dp[i][j] + 1);
        }
    }
}

int solve(int type) {
    for (int i = 0; i <= N; i++) {
        dp[i][i] = INF;
        dp[i + 1][i] = INF;
        dp[i][i + 1] = INF;
        dp[i + 2][i] = INF;
        dp[i][i + 2] = INF;
    }

    if (type == 0)
        dp[0][0] = 0;
    else if (type == 1) {
        dp[1][0] = 1;
        dp[2][0] = 2;
        dp[1][1] = 2;
    }
    else if (type == 2) {
        dp[0][1] = 1;
        dp[0][2] = 2;
        dp[1][1] = 2;
    }
    else
        dp[1][1] = 2;

    for (int i = 0; i <= N; i++) {
        if (type != 0 && i == 0)
            continue;

        if (i >= 2) {
            update(i - 2, i);
            update(i, i - 2);
        }
        if (i >= 1) {
            update(i - 1, i);
            update(i, i - 1);
        }
        update(i, i);
    }

    if (type == 0)
        return dp[N][N];
    else if (type == 1)
        return dp[N - 1][N];
    else if (type == 2)
        return dp[N][N - 1];
    else
        return dp[N - 1][N - 1];
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> T;
    cin >> T;
    
    for (int i = 0; i < T; i++) {
        //inf >> N >> W;
        cin >> N >> W;

        for (int j = 0; j < 2; j++) {
            for (int k = 1; k <= N; k++) {
                //inf >> a[j][k];
                cin >> a[j][k];
            }
        }
        int ret = solve(0);
        if (a[0][1] + a[0][N] <= W)
            ret = min(ret, solve(1));
        if (a[1][1] + a[1][N] <= W)
            ret = min(ret, solve(2));
        if (a[0][1] + a[0][N] <= W && a[1][1] + a[1][N] <= W)
            ret = min(ret, solve(3));
        printf("%d\n", ret);
    }

    return 0;
}