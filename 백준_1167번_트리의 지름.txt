#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
#include <fstream>

using namespace std;

typedef pair<int, int> pii;

const int S = 1e5, INF = 1e9;
int N;
int d[S + 5];
vector<pii> adj[S + 5];
bool visited[S + 5];

int bfs(int st) {
    memset(visited, 0, sizeof(visited));
    for (int i = 1; i <= N; i++)
        d[i] = INF;
    queue<int> q;
    q.push(st);
    d[st] = 0;

    while (!q.empty()) {
        int here = q.front();
        q.pop();

        if (visited[here] == true)
            continue;
        visited[here] = true;

        for (int i = 0; i < adj[here].size(); i++) {
            int there = adj[here][i].first;
            int cost = adj[here][i].second;

            if (visited[there] == true)
                continue;

            d[there] = min(d[there], d[here] + cost);
            q.push(there);
        }
    }
    int ret = 1;
    for (int i = 1; i <= N; i++) {
        if (d[ret] < d[i])
            ret = i;
    }
    return ret;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> N;
    cin >> N;

    for (int v, i = 0; i < N; i++) {
        //inf >> v;
        cin >> v;

        int u, w;
        while (true) {
            //inf >> u;
            cin >> u;

            if (u == -1)
                break;
            //inf >> w;
            cin >> w;

            adj[v].push_back({ u, w });
            adj[u].push_back({ v, w });
        }
    }
    int a = bfs(1);
    int b = bfs(a);

    printf("%d", d[b]);

    return 0;
}