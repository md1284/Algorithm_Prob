#include <iostream>
#include <vector>
#include <string.h>
#include <math.h>

using namespace std;

const int MAX_N = 1000000000;
int n;

unsigned char sieve[(MAX_N + 7) / 8];

inline bool isPrime(int k) {
	return sieve[k>>3] & (1<<(k&7));
}

inline void setComposite(int k) {
	sieve[k>>3] &= ~(1<<(k&7));
}

void eratosthenes() {
	memset(sieve, 255, sizeof(sieve));
	setComposite(0);
	setComposite(1);
	
	int sqrtn = int(sqrt(n));
	for(int i = 2; i<=sqrtn; i++) {
		if(isPrime(i)) {
			for(int j = i*i; j<=n; j+=i)
				setComposite(j);
		}
	}
}

int main() {
	n = 4000001;
	eratosthenes();

	int N;
	cin >> N;
	
	vector<int> s;
	for(int i = 0; i<=N; i++)
		if(isPrime(i))	s.push_back(i);	
	
	int sum = 0, cnt = 0;
	for(int i = 0; i<s.size(); i++) {
		for(int j = i; j<s.size(); j++) {
			sum += s[j];
			if(sum == N) {
				cnt++;
				sum = 0;
				break;
			}
			else if(sum > N) {
				sum = 0;
				break;
			}
		}
	}
	cout << cnt << endl;
	
	return 0;
}