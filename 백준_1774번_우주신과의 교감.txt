#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <cmath>
#include <fstream>

using namespace std;

const int S = 1e4;
int N, M;
int pt[S+5], d[S+5];
vector<pair<int,int>> xy;
vector<pair<double,int>> adj[S+5];
vector<pair<double, pair<int,int>>> edge;

int findRoot(int a) {
	stack<int> st;
	while(a != pt[a]) {
		st.push(a);
		a = pt[a];
	}
	while(!st.empty()) {
		int t = st.top();
		st.pop();
		pt[t] = a;
	}
	return a;
}

void join(int a, int b) {
	a = findRoot(a);
	b = findRoot(b);
	
	if(a == b)
		return;
		
	if(d[b] < d[a])
		pt[b] = a;
	else if(d[a] < d[b])
		pt[a] = b;
	else {
		pt[b] = a;
		d[a]++;
	}
}

double dist(pair<int, int> p1, pair<int, int> p2) {
	return sqrt(1.0*(p1.first-p2.first)*(p1.first-p2.first)+1.0*(p1.second-p2.second)*(p1.second-p2.second));
}

double kruskal() {
	double ret = 0;
	for(int i = 0; i<N; i++) {
		for(int j = i+1; j<N; j++) {
			double d = dist(xy[i], xy[j]);
			edge.push_back({d, {i+1,j+1}});
		}
	}
	sort(edge.begin(), edge.end());
	for(int a,b,i = 0; i<edge.size(); i++) {
		double c = edge[i].first;
		a = edge[i].second.first, b = edge[i].second.second;
		
		if(findRoot(a) != findRoot(b)) {
			ret += c;
			join(a,b);
		}		
	}
	return ret;
}

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);
	//fstream inf("prob.txt");
	//inf >> N >> M;
	cin >> N >> M;
	
	for(int x,y,i = 1; i<=N; i++) {
		//inf >> x >> y;
		cin >> x >> y;
		
		xy.push_back({x,y});
		pt[i] = i;
	}
	for(int a,b,i = 0; i<M; i++) {
		//inf >> a >> b;
		cin >> a >> b;
		
		join(a, b);
	}
	
	printf("%0.2lf", kruskal());
	
	return 0;
}