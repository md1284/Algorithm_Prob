#include <iostream>
#include <algorithm>
#include <cstring>
#include <fstream>

using namespace std;

const int S = 5e3;
int T, N;
int a[S + 5], b[S + 5], dp[S + 5][S + 5], psum[S + 5];

int solve() {
    memset(dp, 0, sizeof(dp));
    memset(psum, 0, sizeof(psum));

    for (int i = 1; i <= N; i++) {
        if (a[i] == b[i])
            dp[i][i] = 1;

        if (i < N && a[i] == b[i + 1])
            dp[i][i + 1]++;
        if (i < N && a[i + 1] == b[i])
            dp[i][i + 1]++;
    }

    for (int i = 1; i <= N; i++) {
        for (int j = 1; j <= N; j++) {
            if (i - j <= 0 || i + j > N)
                break;

            int ad = 0;
            if (a[i - j] == b[i + j])
                ad++;
            if (a[i + j] == b[i - j])
                ad++;

            dp[i - j][i + j] = max(dp[i - j][i + j], dp[i - j + 1][i + j - 1] + ad);
        }

        for (int j = 1; j <= N; j++) {
            if (i - j <= 0 || i + j + 1 > N)
                break;

            int ad = 0;
            if (a[i - j] == b[i + j + 1])
                ad++;
            if (a[i + j + 1] == b[i - j])
                ad++;

            dp[i - j][i + j + 1] = max(dp[i - j][i + j + 1], dp[i - j + 1][i + j] + ad);
        }
    }

    for (int i = 1; i <= N; i++)
        psum[i] = psum[i - 1] + (a[i] == b[i]);

    int ret = 0;
    for (int i = 1; i <= N; i++) {
        for (int j = i; j <= N; j++)
            ret = max(ret, psum[N] - (psum[j] - psum[i - 1]) + dp[i][j]);
    }
    return ret;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> T;
    cin >> T;

    for (int i = 1; i <= T; i++) {
        //inf >> N;
        cin >> N;

        for (int j = 1; j <= N; j++) {
            //inf >> a[j];
            cin >> a[j];
        }
        for (int j = 1; j <= N; j++) {
            //inf >> b[j];
            cin >> b[j];
        }
        printf("Case #%d\n", i);
        printf("%d\n", solve());
    }
    
    return 0;
}