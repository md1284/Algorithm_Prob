#include <iostream>
#include <algorithm>
#include <fstream>

using namespace std;

typedef long long ll;

const int mod = 1e7;
int c, n;
int DP[101][101];

ll solve(int n) {
    ll ret = 0;

    if (DP[n][n] != 0) {
        for (int j = 1; j <= n; j++) {
            ret += DP[n][j];
            if (ret >= mod)
                ret %= mod;
        }
        return ret;
    }

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++)
            DP[i][j] = 0;
        DP[i][i] = 1;
    }

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= i; j++) {
            for (int k = 1; k <= i-j; k++) {
                DP[i][j] += DP[i - j][k] * (k + j - 1);

                if (DP[i][j] >= mod)
                    DP[i][j] %= mod;

                //printf("update DP[%d][%d]: %d, DP[%d][%d]: %d added\n",
                //    i, j, DP[i][j], i - j, k, DP[i - j][k]);
            }
        }
    }

    for (int j = 1; j <= n; j++) {
        ret += DP[n][j];
        if (ret >= mod)
            ret %= mod;
    }
    return ret;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> c;
    cin >> c;

    solve(100);
    for (int i = 0; i < c; i++) {
        //inf >> n;
        cin >> n;

        printf("%lld\n", solve(n));
    }

    return 0;
}