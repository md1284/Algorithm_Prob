#include <iostream>
#include <queue>
#include <cstring>
#include <fstream>

using namespace std;

const int SZ = 1e5;
int T, N, S;
int A[SZ+5], TR[SZ+5];
pair<int, int> Tree[4*SZ+5];
queue<int> idx[SZ+5];

pair<int, int> init(int bucket, int start, int end) {
	if(start == end) {
		Tree[bucket].first = A[start];
		Tree[bucket].second = A[start];
		return Tree[bucket];
	}
	int mid = (start+end)/2;
	pair<int, int> l = init(bucket*2, start, mid);
	pair<int, int> r = init(bucket*2+1, mid+1, end);
	return Tree[bucket] = make_pair(l.first+r.first, max(l.second, l.first+r.second));
}

void update(int bucket, int node, int start, int end, int x) {
	if(node < start || end < node)	return;
	
	if(start == end) {
		Tree[bucket].first += x;
		Tree[bucket].second += x;
		return;
	}

	int mid = (start+end)/2;
	update(bucket*2, node, start, mid, x);
	update(bucket*2+1, node, mid+1, end, x);
	Tree[bucket].first = Tree[bucket*2].first + Tree[bucket*2+1].first;
	Tree[bucket].second = max(Tree[bucket*2].second, Tree[bucket*2].first+Tree[bucket*2+1].second);
}

pair<int, int> get(int bucket, int start, int end, int left, int right) {
	if(right < start || end < left)	return make_pair(0, 0);
	
	if(left <= start && end <= right)	return Tree[bucket];
	
	int mid = (start+end)/2;
	pair<int, int> l = get(bucket*2, start, mid, left, right);
	pair<int, int> r = get(bucket*2+1, mid+1, end, left, right);
	pair<int, int> ret = make_pair(l.first+r.first, max(l.second, l.first+r.second));
	
	return ret;
}

int solve() {
	int ret = 0;
	init(1, 1, N);
	
	for(int i = 1; i<=N; i++) {
		pair<int, int> tmp = get(1, 1, N, i, N);
		ret = max(ret, max(tmp.first, tmp.second));

		if(!idx[TR[i]].empty()) {
			int id = idx[TR[i]].front();
			update(1, id, 1, N, S+1);
			idx[TR[i]].pop();
			
			if(!idx[TR[i]].empty()) {
				id = idx[TR[i]].front();
				update(1, id, 1, N, -S);
			}
		}
	}
	
	return ret;
}

int main() {
	//fstream inf("prob.txt");
	//inf >> T;
	scanf("%d", &T);
	
	for(int i = 1; i<=T; i++) {
		//inf >> N >> S;
		scanf("%d %d", &N, &S);
		
		memset(Tree, 0, sizeof(Tree));
		memset(A, 0, sizeof(A));
		memset(TR, 0, sizeof(TR));
		for(int j = 0; j<=SZ+4; j++)
			while(!idx[j].empty())	idx[j].pop();
			
		int cnt[SZ+5] = {0, };
		for(int j = 1; j<=N; j++) {
			int tt;
			//inf >> tt;
			scanf("%d", &tt);
			
			TR[j] = tt;
			cnt[tt]++;
			if(cnt[tt] <= S)
				A[j] = 1;
			else if(cnt[tt] == S+1) {
				A[j] = -S;
				idx[tt].push(j);
			}
			else
				idx[tt].push(j);
		}
		
		printf("Case #%d: %d\n", i, solve());		
	}
	return 0;
}