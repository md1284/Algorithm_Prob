#include <iostream>
#include <vector>
#include <queue>

using namespace std;

typedef pair<int,int> pii;

const int S = 200, INF = 1e9;
int N, M;
int dist[S+5];
vector<pii> adj[S+5];

void dijkstra(int st) {
    for(int i = 1; i<=N; i++)
        dist[i] = INF;
    priority_queue<pii, vector<pii>, greater<pii>> pq;
    pq.push({0, st});
    dist[st] = 0;

    while(!pq.empty()) {
        int d = pq.top().first;
        int here = pq.top().second;
        pq.pop();

        for(int i = 0; i<adj[here].size(); i++) {
            int there = adj[here][i].first;
            int c = adj[here][i].second;

            if(dist[there] <= d + c)
                continue;
            dist[there] = d + c;
            pq.push({dist[there], there});
        }
    }
}

double solve() {
    double ret = INF;
    for(int i = 1; i<=N; i++) {
        dijkstra(i);

        double t = 0;
        for(int here = 1; here<=N; here++) {
            for(int j = 0; j<adj[here].size(); j++) {
                int there = adj[here][j].first;
                int c = adj[here][j].second;

                t = max(t, min(dist[here], dist[there]) + 0.5 * c + 0.5 * abs(dist[here] - dist[there]));
            }
        }
        ret = min(ret, t);
    }
    return ret;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    cout << fixed;
    cout.precision(1);
    cin >> N >> M;

    for(int i = 0; i<M; i++) {
        int s, e, l;
        cin >> s >> e >> l;

        adj[s].push_back({e,l});
        adj[e].push_back({s,l});
    }
    cout << solve() << '\n';

    return 0;
}