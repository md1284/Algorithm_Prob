#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <fstream>

using namespace std;

typedef pair<int, int> pii;

const int S = 1e4;
int T, N, K;
int Tree[4 * S + 5], dp[S + 5];
vector<pii> p;

bool cmp(const pii& a, const pii& b) {
    if (a.first == b.first)
        return a.second > b.second;
    return a.first < b.first;
}

void update(int b, int s, int e, int n) {
    if (n < s || e < n)
        return;

    if (s == e) {
        Tree[b] = dp[n];
        return;
    }

    int mid = (s + e) / 2;
    update(b * 2, s, mid, n);
    update(b * 2 + 1, mid + 1, e, n);
    Tree[b] = max(Tree[b * 2], Tree[b * 2 + 1]);
}

int get(int b, int s, int e, int l, int r) {
    if (r < s || e < l)
        return 0;

    if (l <= s && e <= r)
        return Tree[b];

    int mid = (s + e) / 2;
    return max(get(b * 2, s, mid, l, r), get(b * 2 + 1, mid + 1, e, l, r));
}

int solve() {
    memset(dp, 0, sizeof(dp));
    memset(Tree, 0, sizeof(Tree));
    sort(p.begin(), p.end(), cmp);

    for (int i = 0; i < N; i++) {
        int idx = p[i].second;
        dp[idx] = get(1, 1, N, 1, idx - 1) + 1;
        update(1, 1, N, idx);
        if (dp[idx] == K)
            return true;
    }
    return false;
}

int main(void) {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);
    //fstream inf("prob.txt");
    //inf >> T;
    cin >> T;

    for (int i = 1; i <= T; i++) {
        //inf >> N >> K;
        cin >> N >> K;

        p.clear();
        for (int x, j = 1; j <= N; j++) {
            //inf >> x;
            cin >> x;

            p.push_back({ x, j });
        }
        printf("Case #%d\n", i);
        printf("%d\n", solve());
    }

    return 0;
}