#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <string.h>

using namespace std;

int n, m;
int map[101][101];
bool visit[101][101];

int mov[4][2] = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};

int bfs(int y, int x) {
	int cnt = 1;
	visit[y][x] = true;
	
	queue<pair<int, int> > q;
	q.push(make_pair(y, x));
	
	while(true) {
		queue<pair<int, int> > p;

		while(!q.empty()) {
			int y = q.front().first;
			int x = q.front().second;
			q.pop();
			
			for(int i = 0; i<4; i++) {
				int dy = y + mov[i][0];
				int dx = x + mov[i][1];
				
				if(dx < 0 || m <= dx || dy < 0 || n <= dy)	continue;
				if(visit[dy][dx] || map[dy][dx] == 0)	continue;

				visit[dy][dx] = true;
				p.push(make_pair(dy, dx));
			}
		}
		q = p;
		cnt++;
		if(visit[n-1][m-1])	break;
	}
	return cnt;
}

int main() {
	//ifstream inf("prob.txt");
	cin >> n >> m;
	//inf >> n >> m;
	
	for(int i = 0; i<n; i++) {
		string str;
		cin >> str;
		//inf >> str;
		
		for(int j = 0; j<m; j++)
			if(str[j] == '1')	map[i][j] = 1;
	}
	
	cout << bfs(0, 0) << endl;
	

	return 0;
}